import React from 'react';
import { connect } from 'react-redux';
import { getItem,SetEmpty} from '../../actions/index';
import {postItem} from '../../actions/user'

import { CLIENT_ID, LIST_FIELDS} from '../../config';
import logo from '../../../public/assets/img/spinner.gif';
import FontAwesome from 'react-fontawesome';
import Chip from '@material-ui/core/Chip';
class Filter extends React.Component{
    constructor(props){
        super(props);
        this.state={
            choices:[],
            showChoices:false,
            filter_spinner:false,
            tags:[],
            stop:false
        }

        this.renderFilterForm=this.renderFilterForm.bind(this);
        this.HandleOnChange=this.HandleOnChange.bind(this);
        this.renderChoices=this.renderChoices.bind(this);
        this.AddChoice=this.AddChoice.bind(this);
        this.renderTags=this.renderTags.bind(this);
        this.removeTag=this.removeTag.bind(this);
        this.handeFilter=this.handeFilter.bind(this);
        this.handeSimpleFilter=this.handeSimpleFilter.bind(this)
    }

    handeFilter(){
        this.setState({filter_spinner:true})
        this.props.SetEmpty('EMPTY_PROJECTS_LIST');

        var tags_data=this.state.tags.filter(obj=>obj.value!=="");
        var filters=[];
        tags_data.map((tag)=>{
            return(
                filters.push(`${tag.id}:${tag.value}`)
            )
        })
        const data={fields_to_view:[].toString()}
        this.props.postItem(`/forms/${this.props.FormId}/filter/entries/list/?fields_to_filter=${filters.toString()}&client=${CLIENT_ID}`,this.props.action,data)
    }
    handeSimpleFilter(Id,Value){
        this.setState({filter_spinner:true})
        this.props.SetEmpty('EMPTY_PROJECTS_LIST');
        const data={fields_to_view:[].toString()}
        this.props.postItem(`/forms/${this.props.FormId}/filter/entries/list/?fields_to_filter=${Id}:${Value}&client=${CLIENT_ID}`,this.props.action,data)
    }
    AddChoice(e){
        if(e.target.value==='Filtrer par:' || this.fieldId.valu==='Filtrer par:' ){
            throw this.setState({stop:true});
        }
        const Id=this.fieldId?this.fieldId.value:null;
        const Value=e.target?e.target.value:null;
        this.setState({tags: this.state.tags.filter(tag => tag.id!== Id)});
        this.setState(state => ({ tags: [...state.tags, {id:Id,value:Value}] }));
        setTimeout(() => {
            if(this.state.tags.length>1){
                this.handeFilter();
            }else{
               console.log("le label",Id,"la valeur",Value);
               this.handeSimpleFilter(Id,Value)
            }
        }, 1000);
        
   }
    removeTag(tagId){
        console.log(tagId)
        this.setState({tags: this.state.tags.filter((tag,key) => key !== tagId)});
        setTimeout(() => {
            if(this.state.tags.length>=1){
                this.handeFilter();
            }else{
                this.setState({showChoices:false})
                this.props.SetEmpty('SET_FILTER_ITEMS_EMPTY');
                this.props.getItem(`/forms/${this.props.FormId}/view/?client=${CLIENT_ID}`, 'GET_FILTER_ITEMS')
                this.props.postItem(`/forms/${this.props.FormId}/entries/list/?client=${CLIENT_ID}`,`GET_PARTICIPANTS_LIST`,{fields_to_view:"",confirmation_form:""});

            }
        }, 1000);
    }

    renderTags(){
        return(
            this.state.tags.length!==0?
            this.state.tags.map((tag,key)=>{
                return(
                    <div key={key} style={{'background-color':'st #cfd0d2','border-radius':'20%',height:'auto'}}>
                    <span> {tag.value}   <a href="#" onClick={()=>this.removeTag(key)}><FontAwesome className='super-crazy-colors' name='times'/></a>
                    </span></div>
                )
            })
            :null
        )
    }
    renderChoices(){
        return(
            <div className="form-group col-md-6">
            <select className="form-control" onChange={(e)=>this.AddChoice(e)}>
               <option>Filtrer par:</option>
                {
                  this.state.choices.split(',').map((choice,key)=>{
                        return(
                            <option key={key} value={choice}>{choice}</option>
                        )
                    })
                }
            </select>
            </div>
        )
    }
    HandleOnChange(e){
        if(e.target.value==='Filtrer par:'){
            throw this.setState({stop:true,showChoices:false});
        }
        this.setState({choices:this.props.fields.filter(obj=>obj.label===e.target.value)[0].choices});
        this.setState({showChoices:true});
    }
    componentDidMount(){
        this.props.SetEmpty('SET_FILTER_ITEMS_EMPTY');
        this.props.getItem(`/forms/${this.props.FormId}/view/?client=${CLIENT_ID}`, 'GET_FILTER_ITEMS')
    }
    renderFilterForm(){
           return(
            <div className="form-group col-md-6">
               <select  className="form-control" onChange={(e)=>this.HandleOnChange(e)} ref={fieldId => { this.fieldId = fieldId;}}>
                 <option>Filtrer par:</option>
                   {
                      this.props.fields.map((field,key)=>{
                        if(field.choices!=="" && field.label!=="Mois" && field.label!=="Date de naissance" && field.label!=="Termes & conditions"){
                            return(
                                <option key={key} value={field.label}>{field.label==="Année"?"Date de naissance":field.label==="Vous êtes ?"?"Genre":field.label==="Vous êtes?"?"Coureur":field.label=="Si vous êtes dans une équipe"?"Equipe":field.label}</option>   
                            )
                          }
                      }) 
                   }
               </select>
            </div>

           )
    }
    render(){
       return(
           <div className="row">
               {
                   this.props.fields.length!==0?
                   this.renderFilterForm()
                   :this.props.filter_fields_error?<b style={{color:'red'}}>{this.props.filter_fields_error}</b>:<img src={logo} className="Form-logo-spinner" alt="logo"/>
               }
               {
                   this.state.showChoices?this.renderChoices():null
               }
          
              <div className="value-filter col-md-12">{this.renderTags()}</div>
           </div>
       )
    }
}
function mapStateToProps(state) {
    return {
        fields:state.user.filters.filter_fields,
        filter_fields_error:state.user.filters.filter_fields_error
    };
  }
export default connect(mapStateToProps,{getItem,SetEmpty,postItem})(Filter);