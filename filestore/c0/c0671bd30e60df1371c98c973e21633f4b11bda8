
import axios from 'axios';
import { browserHistory } from 'react-router';


import { error as notifError } from 'react-notification-system-redux';

import { logError, getHashUrlParameterByName } from '../utils';
import { DEBUG, API_BASE_URL, DEFAULT_REQUEST_TIMEOUT } from '../config.js';
export const SHOW_LIST = 'SHOW_LIST'

export function ShowList(url) {
    
  return (dispatch, getState) => {
    let instance = getState().user.blankAxiosInstance;

    instance.get(url)
    .then((response) => {
      dispatch({ type: SHOW_LIST, payload: response.data.results })
    })
    .catch(function (error) {
      console.log("error ShowList", url, error);
    });
  }
}

export function getProjects(url, requestTarget, data){
  return(dispatch, getState)=>{
    let instance=getState().user.axiosInstance;
    instance.post(url,data)
    .then((response)=>{
      console.log("getProjects", requestTarget, response, data);
        dispatch({type :`${requestTarget}_SUCCESS`, payload: response.data});
    }).catch(error=>{
      console.log("getProjects", requestTarget, error, data);
    if (error.response && error.response.data) {
        dispatch({ type: `${requestTarget}_FAILURE`, payload: error.response.data })
      }else{
        dispatch({ type: `${requestTarget}_FAILURE`, payload: error })
      }
    })
  }
}

export function SetEmpty(requestTarget){
  return(dispatch, getState)=>{
    console.log("Set Empty", requestTarget);
    dispatch({type :requestTarget, payload: null});
  }
}

export function getItem(url, itemType, callback) {

  return (dispatch, getState) => {

    const instance = getState().user.axiosInstance;

    instance.get(url)
    .then((response) => {
      console.log('getItem response : ', itemType, response)
      console.log(response.data)
      dispatch({ type: itemType, payload: response.data })
    })
    .catch((error) => {
      if (error.response && error.response.data) {
        dispatch({ type: `${itemType}_FAILURE`, payload: error.response.data});
      } else {
        dispatch({ type: `${itemType}_FAILURE`, payload: error });
      }
    })
    .then(() => {
      if(callback) {
        callback();
      }
    });
  }
}