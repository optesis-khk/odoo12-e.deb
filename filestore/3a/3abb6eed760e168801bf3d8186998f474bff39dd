import React from 'react';
import { connect } from 'react-redux';
import {FormId_Contact , CLIENT_ID} from '../config.js'
import logo_spinner from '../assets/img/loading.GIF';
import Form from "react-jsonschema-form";
// import { render } from "react-dom";
import { createFormEntrie} from '../actions/user';
import {Field, reduxForm } from 'redux-form';
import {GET_FORM, SUBMIT_FORM,CREATE_FORM_ENTRIE} from '../actions/user';

var PROPERTIES={};
var REQUIRED=[];
var UISCHEMA={}
var schema={
  "title": "A registration form",
  "description": "A simple form example.",
  "type": "object",
  "required": [
    "firstName",
    "lastName"
  ],
  "properties": {
    "firstName": {
      "type": "string",
      "title": "First name"
    },
    "lastName": {
      "type": "string",
      "title": "Last name"
    },
    "age": {
      "type": "integer",
      "title": "Age"
    },
    "bio": {
      "type": "string",
      "title": "Bio"
    },
    "password": {
      "type": "string",
      "title": "Password",
      "minLength": 3
    },
    "telephone": {
      "type": "string",
      "title": "Telephone",
      "minLength": 10
    },
    "email": {
      "type": "string",
      "format": "email"
    },
    "fichier": {
      "type": "string",
      "format": "data-url",
      "title": "Single file"
    },
  }
};
var uiSchema={
    "firstName": {
      "ui:autofocus": true,
      "ui:emptyValue": ""
    },
    "age": {
      "ui:widget": "updown",
      "ui:title": "Age of person",
      "ui:description": "(earthian year)"
    },
    "bio": {
      "ui:widget": "textarea"
    },
    "password": {
      "ui:widget": "password",
      "ui:help": "Hint: Make it strong!"
    },
    "date": {
      "ui:widget": "alt-datetime"
    },
    "telephone": {
      "ui:options": {
        "inputType": "tel"
      }
    }
  };
  var formData= {
    "title": "My current tasks",
    "tasks": [
      {
        "title": "My first task",
        "details": "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
        "done": true
      },
      {
        "title": "My second task",
        "details": "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur",
        "done": false
      }
    ]
  };
  function InitialFields()
  {
   var FIELDS={
        'Single line text':{widget:'', type:'string'},
        'Multi line text':{widget:'textarea', type:'string'},
        'Email':{widget:'email', type:'email'},
        'Date':{widget:'alt-date', type:'string'},
        'File upload':{widget:'file', type:'file'},
        'Radio buttons':{widget:'radio', type:'boolean'},
        'Drop down':{widget:'checkboxes', type:'select'},
        'Check boxes':{widget:'checkboxes', type:'checkboxes'},
        'Check boxe':{widget:'checkboxes', type:'checkboxes'},
        'Number':{widget:'updown', type:'number'},
        'Page break':{widget:'', type:'array'},
        'URL':{widget:'', type:'string'}
   };
   return FIELDS;
  }
class DynamicFormView extends React.Component{

  constructor(props) {
    super(props);
    this.state={
      email_to:'',
      status:false,
      spinner_status:false

    }
    this.transformForm=this.transformForm.bind(this);
    this.Submission=this.Submission.bind(this);
  }
    // Submission(formData){
  //   const data=formData.formData;
  //   var virtual_state={
  //     email_to:'',
  //     status:false
  //   }
  //   var fields=[];
  //   this.props.fields.map((field)=>{
  //    if(field.field_type!='Page break'){
  //     if(typeof data[`${field.id}`]!='object'){
  //       if(field.field_type=='Email' && virtual_state.status==false)
  //       { 
  //         virtual_state.email_to=data[`${field.id}`];
  //         virtual_state.status=true;
  //       }
  //       return fields.push({value:data[`${field.id}`],field_id:field.id, label:field.label})
  //     }
  //     else{
  //       var vall="";
  //       data[`${field.id}`].map((val)=>{
  //           return vall+=val+','
  //       });
  //       return fields.push({value:vall.trim().slice(0, -1),field_id:field.id, label:field.label})
  //     }
  //    }
  //   });
  //   const FOMR_ID=this.props.formId;
  //   const entrie_data={email_to:virtual_state.email_to};
  //   this.setState({spinner:true})
  //   this.props.changeSpinnerStatus(ACTIVATE_SPINNER);
  //   this.props.createFormEntrie(CREATE_FORM_ENTRIE, entrie_data,SUBMIT_FORM,FOMR_ID,this.props.clientId, {fields:fields,is_submitted:'true'});
  //   // REQUIRED= [] ;  
  // }
  Submission(formData){
    var virtual_state={
      email_to:'',
      status:false,
    }
    const data=formData.formData;
    var fields=[];
    this.props.fields.map((field)=>{
     if(field.field_type!='Page break'){
      if(typeof data[`${field.id}`]!='object'){
        if(field.field_type=='Email' && !virtual_state.status){
          virtual_state.status=true;
          virtual_state.email_to=data[`${field.id}`]
        }
        return fields.push({value:data[`${field.id}`]||"" ,field_id:field.id, label:field.label})
      }
      else{
        var vall="";
        data[`${field.id}`].map((val)=>{
            return vall+=val+','
        });
        return fields.push({value:vall.trim().slice(0, -1),field_id:field.id, label:field.label})
      }
     }
    });
    const entrie_data={email_to:virtual_state.email_to};
    this.setState({spinner_status:true})
    this.props.createFormEntrie(CREATE_FORM_ENTRIE, entrie_data,SUBMIT_FORM,this.props.formId,this.props.clientId, {fields:fields, is_submitted:"false"});
  }
transformForm(fieldConfig){
    const properties=InitialFields()[fieldConfig.field_type];

  if (fieldConfig.required){
      REQUIRED.push(fieldConfig.id);
    }

  if(properties.type=='email'){
    PROPERTIES[fieldConfig.id]={
      "type": "string",
      "format": "email",
      "title":fieldConfig.label,

    };
     UISCHEMA[fieldConfig.id]={
      "ui:placeholder":fieldConfig.placeholder_text
    }
  }else if(properties.type=='file'){
    PROPERTIES[fieldConfig.id]={
      "type": "string",
      "format": "data-url",
      "title":fieldConfig.label
    }
  }else if(properties.type=='tel'){
    PROPERTIES[fieldConfig.id]={
      type:properties.type,
      title:fieldConfig.label=""?fieldConfig.id:fieldConfig.label
    };
    UISCHEMA[fieldConfig.id]={
      "ui:widget":properties.widget,
      "ui:title":fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
      "ui:placeholder":fieldConfig.placeholder_text,
      "ui:help":fieldConfig.help_text

    }
  }else if(properties.type=='checkboxes'){
    PROPERTIES[fieldConfig.id]=
    {
      type: "array",
      minItems: 2,
      title: fieldConfig.label,
      items: {
        type: "string",
        enum:  fieldConfig.choices.split(','),
      },
      uniqueItems: true
    };
    UISCHEMA[fieldConfig.id]={
      "ui:widget":properties.widget
    }
  }else if(properties.type=='boolean'){
    PROPERTIES[fieldConfig.id]={
      title:fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
      type: "string",
      enum:  fieldConfig.choices.split(','),
    };
    UISCHEMA[fieldConfig.id]={
      "ui:widget":"radio",
      "ui:help":fieldConfig.help_text
    }
  }else if(properties.type=='select'){
    PROPERTIES[fieldConfig.id]={
      type:"string",
      title:fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
      "enum": fieldConfig.choices.split(',')
    };
    UISCHEMA[fieldConfig.id]={
      "ui:placeholder":fieldConfig.placeholder_text
    }
  }else if(properties.type=='array'){

  }else{
    PROPERTIES[fieldConfig.id]={
      type:properties.type,
      title:fieldConfig.label=""?fieldConfig.id:fieldConfig.label
    };
    if(properties.widget==''){
         UISCHEMA[fieldConfig.id]={
          // "ui:widget":properties.widget,
          "ui:title":fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
          "ui:placeholder":fieldConfig.placeholder_text,
          "ui:help":fieldConfig.help_text
        }
      }else{

        UISCHEMA[fieldConfig.id]={
          "ui:widget":properties.widget,
          "ui:title":fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
          "ui:placeholder":fieldConfig.placeholder_text,
          "ui:help":fieldConfig.help_text
        }
      }
  }
  }
  componentWillReceiveProps(nextProps) {
    this.setState({spinner_status:nextProps.spinner_status});
    if(nextProps.spinner_status==false){
      REQUIRED=[];
    }
 }
  render() {
    const fields = this.props.fields;
     console.log('test Field' , {fields});
    {fields ? fields.map((field)=>{
      if(field){
        return(
          this.transformForm(field)
        )
      }
    })
    : null}
    schema['title']=this.props.title;
    schema['description']="";
    schema["properties"]=PROPERTIES;
    schema["required"]=REQUIRED;
    uiSchema=UISCHEMA;
    const { t } = this.props;
    return(
  <div>

   <Form 
    schema={schema}
    uiSchema={uiSchema}
    onSubmit={this.Submission}
    >

    {this.state.spinner_status==false?<div className="text-center"><img  width={100} src={logo_spinner} className="Form-logo-spinner" alt="logo" /></div> : 
    <button
          className="btn btn-md btn-black form-full" type="submit" id="form-submit" name="submit"
        >
          {this.props.textbtn}
        </button>
    }
   
    </Form>
    

    </div>
    )
  }
};  
export default connect(null, {createFormEntrie})(DynamicFormView);