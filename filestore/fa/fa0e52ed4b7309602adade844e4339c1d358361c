import axios from 'axios';
export const CREATE_GROUP = 'CREATE_GROUP';
export const CREATE_GROUP_REQUEST = 'CREATE_GROUP_REQUEST';
export const CREATE_GROUP_SUCCESS = 'CREATE_GROUP_SUCCESS';
export const CREATE_GROUP_FAILURE = 'CREATE_GROUP_FAILURE';

export const UPDATE_GROUP = 'UPDATE_GROUP';
export const UPDATE_GROUP_REQUEST = 'UPDATE_GROUP_REQUEST';
export const UPDATE_GROUP_SUCCESS = 'UPDATE_GROUP_SUCCESS';
export const UPDATE_GROUP_FAILURE = 'UPDATE_GROUP_FAILURE';

export const REMOVE_GROUP = 'REMOVE_GROUP';
export const REMOVE_GROUP_REQUEST = 'REMOVE_GROUP_REQUEST';
export const REMOVE_GROUP_SUCCESS = 'REMOVE_GROUP_SUCCESS';
export const REMOVE_GROUP_FAILURE = 'REMOVE_GROUP_FAILURE';

export const GET_GROUP_FORM = 'GET_GROUP_FORM';

export const CREATE_GROUP_POST = 'CREATE_GROUP_POST';
export const CREATE_GROUP_POST_REQUEST = 'CREATE_GROUP_POST_REQUEST';
export const CREATE_GROUP_POST_SUCCESS = 'CREATE_GROUP_POST_SUCCESS';
export const CREATE_GROUP_POST_FAILURE = 'CREATE_GROUP_POST_FAILURE';

export const UPDATE_GROUP_POST = 'UPDATE_GROUP_POST';
export const UPDATE_GROUP_POST_REQUEST = 'UPDATE_GROUP_POST_REQUEST';
export const UPDATE_GROUP_POST_SUCCESS = 'UPDATE_GROUP_POST_SUCCESS';
export const UPDATE_GROUP_POST_FAILURE = 'UPDATE_GROUP_POST_FAILURE';

export const REMOVE_GROUP_POST = 'REMOVE_GROUP_POST';
export const REMOVE_GROUP_POST_REQUEST = 'REMOVE_GROUP_POST_REQUEST';
export const REMOVE_GROUP_POST_SUCCESS = 'REMOVE_GROUP_POST_SUCCESS';
export const REMOVE_GROUP_POST_FAILURE = 'REMOVE_GROUP_POST_FAILURE';

export const GET_GROUP_POST = 'GET_GROUP_POST';

export const CREATE_GROUP_COMMENT = 'CREATE_GROUP_COMMENT';
export const CREATE_GROUP_COMMENT_REQUEST = 'CREATE_GROUP_COMMENT_REQUEST';
export const CREATE_GROUP_COMMENT_SUCCESS = 'CREATE_GROUP_COMMENT_SUCCESS';
export const CREATE_GROUP_COMMENT_FAILURE = 'CREATE_GROUP_COMMENT_FAILURE';

export const UPDATE_GROUP_COMMENT = 'UPDATE_GROUP_COMMENT';
export const UPDATE_GROUP_COMMENT_REQUEST = 'UPDATE_GROUP_COMMENT_REQUEST';
export const UPDATE_GROUP_COMMENT_SUCCESS = 'UPDATE_GROUP_COMMENT_SUCCESS';
export const UPDATE_GROUP_COMMENT_FAILURE = 'UPDATE_GROUP_COMMENT_FAILURE';

export const REMOVE_GROUP_COMMENT = 'REMOVE_GROUP_COMMENT';
export const REMOVE_GROUP_COMMENT_REQUEST = 'REMOVE_GROUP_COMMENT_REQUEST';
export const REMOVE_GROUP_COMMENT_SUCCESS = 'REMOVE_GROUP_COMMENT_SUCCESS';
export const REMOVE_GROUP_COMMENT_FAILURE = 'REMOVE_GROUP_COMMENT_FAILURE';

export const GET_GROUP_COMMENT = 'GET_GROUP_COMMENT';

export const CREATE_GROUP_INVITATION = 'CREATE_GROUP_INVITATION';
export const CREATE_GROUP_INVITATION_REQUEST = 'CREATE_GROUP_INVITATION_REQUEST';
export const CREATE_GROUP_INVITATION_SUCCESS = 'CREATE_GROUP_INVITATION_SUCCESS';
export const CREATE_GROUP_INVITATION_FAILURE = 'CREATE_GROUP_INVITATION_FAILURE';

export const GET_GROUP_LIST = 'GET_GROUP_LIST';
export const UPDATE_GROUP_LIST = 'UPDATE_GROUP_LIST';
export const GET_GROUP_DETAILS = 'GET_GROUP_DETAILS';

export const GET_GROUP_FEED = 'GET_GROUP_FEED';
export const UPDATE_GROUP_FEED = 'UPDATE_GROUP_FEED';

export const GET_GROUP_ADMIN_LIST_ALL = 'GET_GROUP_ADMIN_LIST_ALL';
export const GET_GROUP_ADMIN_LIST_ONLINE = 'GET_GROUP_ADMIN_LIST_ONLINE';
export const GET_GROUP_ADMIN_LIST_OFFLINE = 'GET_GROUP_ADMIN_LIST_OFFLINE';



export const CREATE_SECTORS_REQUEST = 'CREATE_SECTORS_REQUEST';
export const CREATE_SECTORS_SUCCESS = 'CREATE_SECTORS_SUCCESS';
export const CREATE_SECTORS_FAILURE = 'CREATE_SECTORS_FAILURE';
export const GET_GROUP_SECTORS = 'GET_GROUP_SECTORS';
export const GET_GROUP_LANGUES = 'GET_GROUP_LANGUES';

export const CREATE_LANGUAGE = 'CREATE_LANGUAGE';
export const CREATE_LANGUAGE_REQUEST = 'CREATE_LANGUAGE_REQUEST';
export const CREATE_LANGUAGE_SUCCESS = 'CREATE_LANGUAGE_SUCCESS';
export const CREATE_LANGUAGE_FAILURE = 'CREATE_LANGUAGE_FAILURE';

export const GET_LANGUAGE_LIST = 'GET_LANGUAGE_LIST';
export const GET_LANGUAGE_LEVELS = 'GET_LANGUAGE_LEVELS';
export const GET_GROUP_LANGUAGES = 'GET_GROUP_LANGUAGES';

export const GET_GROUP_POSITIONS = 'GET_GROUP_POSITIONS';

export const CREATE_POSITION = 'CREATE_POSITION';
export const CREATE_POSITION_REQUEST = 'CREATE_POSITION_REQUEST';
export const CREATE_POSITION_SUCCESS = 'CREATE_POSITION_SUCCESS';
export const CREATE_POSITION_FAILURE = 'CREATE_POSITION_FAILURE';



export const GET_GROUP_SKILLS = 'GET_GROUP_SKILLS';

export const CREATE_SKILLS = 'CREATE_SKILLS';
export const CREATE_SKILLS_REQUEST = 'CREATE_SKILLS_REQUEST';
export const CREATE_SKILLS_SUCCESS = 'CREATE_SKILLS_SUCCESS';
export const CREATE_SKILLS_FAILURE = 'CREATE_SKILLS_FAILURE';


export const GET_GROUP_EDUCATIONS = 'GET_GROUP_EDUCATIONS';

export const CREATE_EDUCATION_REQUEST = 'CREATE_EDUCATION_REQUEST';
export const CREATE_EDUCATION_SUCCESS = 'CREATE_EDUCATION_SUCCESS';
export const CREATE_EDUCATION_FAILURE = 'CREATE_EDUCATION_FAILURE';
export const SHOW_GROUPLIST = 'SHOW_GROUPLIST';
export const SHOW_SUGGESTIONLIST = 'SHOW_SUGGESTIONLIST';


export function addSectorsToGroup(sectors, groupId){

  // data = array of skills
  return ((dispatch, getState) => {

    console.log("addSectorsToGroup entry : ", sectors, groupId)
    // we can receive multiple skills at once
    if(sectors.length === 0 || !sectors){
      return;

    } else {

      let axiosInstance = getState().user.axiosInstance;
      dispatch({ type: CREATE_SECTORS_REQUEST });
      let axiosRequests = [];

      sectors.forEach((sector) => {
        const data = {
          is_active: true,
          sector_id: sector.sector_id,
          group_id: groupId,
        }
      })

      // For now, if the first skill added is ok, and the second fails, the store will effectively
      // contains the 'error' info, but the page will have already changed.
      sectors.forEach((sector) => {

        const data = {
          is_active: true,
          sector_id: sector.sector_id,
          group_id: groupId,
        }

        axiosRequests.push(axiosInstance.post(`/groups/${groupId}/sectors/add/`, data))
      });

      axios.all(axiosRequests)
      .then((responses) => {
        console.log("addSectorsToGroup responses", responses);
        dispatch({ type: CREATE_SECTORS_SUCCESS })
      })
      .catch((error) => {
        console.log("addSectorsToGroup error", error);
        if(error.response && error.response.data) {
          dispatch({ type: CREATE_SECTORS_FAILURE, payload: error.response.data });
        } else {
          dispatch({ type: CREATE_SECTORS_FAILURE, payload: error });
        }
      })
    }
  })
}


export function addLanguesToGroup(languages, groupId){

  // data = array of skills
  return ((dispatch, getState) => {

    console.log("addLanguesToGroup entry : ", languages, groupId)
    // we can receive multiple skills at once
    if(languages.length === 0 || !languages){
      return;

    } else {

      let axiosInstance = getState().user.axiosInstance;
      dispatch({ type: CREATE_LANGUAGE_REQUEST });
      let axiosRequests = [];

      languages.forEach((langue) => {
        const data = {
          is_active: true,
          language_id: langue.language_id,
          group_id: groupId,
        }
      })

      // For now, if the first skill added is ok, and the second fails, the store will effectively
      // contains the 'error' info, but the page will have already changed.
      languages.forEach((langue) => {

        const data = {
          is_active: true,
          language_id: langue.language_id,
          group_id: groupId,
        }

        axiosRequests.push(axiosInstance.post(`/groups/${groupId}/languages/add/`, data))
      });

      axios.all(axiosRequests)
      .then((responses) => {
        console.log("addLanguesToGroup responses", responses);
        dispatch({ type: CREATE_LANGUAGE_SUCCESS })
      })
      .catch((error) => {
        console.log("addLanguesToGroup error", error);
        if(error.response && error.response.data) {
          dispatch({ type: CREATE_LANGUAGE_FAILURE, payload: error.response.data });
        } else {
          dispatch({ type: CREATE_LANGUAGE_FAILURE, payload: error });
        }
      })
    }
  })
}

export function addPositionsToGroup(positions, groupId){

  // data = array of skills
  return ((dispatch, getState) => {

    console.log("addPositionsToGroup entry : ", positions, groupId)
    // we can receive multiple skills at once
    if(positions.length === 0 || !positions){
      return;

    } else {

      let axiosInstance = getState().user.axiosInstance;
      dispatch({ type: CREATE_POSITION_REQUEST });
      let axiosRequests = [];

      positions.forEach((position) => {
        const data = {
          is_active: true,
          position_id: position.position_id,
          group_id: groupId,
        }
      })

      // For now, if the first skill added is ok, and the second fails, the store will effectively
      // contains the 'error' info, but the page will have already changed.
      positions.forEach((position) => {

        const data = {
          is_active: true,
          position_id: position.position_id,
          group_id: groupId,
        }

        axiosRequests.push(axiosInstance.post(`/groups/${groupId}/positions/add/`, data))
      });

      axios.all(axiosRequests)
      .then((responses) => {
        console.log("addPositionsToGroup responses", responses);
        dispatch({ type: CREATE_POSITION_SUCCESS })
      })
      .catch((error) => {
        console.log("addPositionsToGroup error", error);
        if(error.response && error.response.data) {
          dispatch({ type: CREATE_POSITION_FAILURE, payload: error.response.data });
        } else {
          dispatch({ type: CREATE_POSITION_FAILURE, payload: error });
        }
      })
    }
  })
}

export function addSkillToGroup(skills, groupId){

  // data = array of skills
  return ((dispatch, getState) => {

    console.log("addSkillToGroup entry : ", skills, groupId)
    // we can receive multiple skills at once
    if(skills.length === 0 || !skills){
      return;

    } else {

      let axiosInstance = getState().user.axiosInstance;
      dispatch({ type: CREATE_SKILLS_REQUEST });
      let axiosRequests = [];

      skills.forEach((skill) => {
        const data = {
          is_active: true,
          is_certified: false,
          skill_id: skill.skill_id,
         group_id: groupId,
        }
      })

      // For now, if the first skill added is ok, and the second fails, the store will effectively
      // contains the 'error' info, but the page will have already changed.
      skills.forEach((skill) => {

        const data = {
          is_active: true,
          is_certified: false,
          skill_id: skill.skill_id,
          group_id: groupId,
        }

        axiosRequests.push(axiosInstance.post(`/groups/${groupId}/skills/add/`, data))
      });

      axios.all(axiosRequests)
      .then((responses) => {
        console.log("addSkillToGroup responses", responses);
        dispatch({ type: CREATE_SKILLS_SUCCESS })
      })
      .catch((error) => {
        console.log("addSkillToGroup error", error);
        if(error.response && error.response.data) {
          dispatch({ type: CREATE_SKILLS_FAILURE, payload: error.response.data });
        } else {
          dispatch({ type: CREATE_SKILLS_FAILURE, payload: error });
        }
      })
    }
  })
}

export function addEducationToGroup(educations, groupId){

  // data = array of skills
  return ((dispatch, getState) => {

    console.log("addEducationToGroup entry : ", educations, groupId)
    // we can receive multiple educations at once
    if(educations.length === 0 || !educations){
      return;

    } else {

      let axiosInstance = getState().user.axiosInstance;
      dispatch({ type: CREATE_EDUCATION_REQUEST });
      let axiosRequests = [];

      educations.forEach((education) => {
        const data = {
          is_active: true,
          education_id: education.education_id,
         group_id: groupId,
        }
      })

      // For now, if the first skill added is ok, and the second fails, the store will effectively
      // contains the 'error' info, but the page will have already changed.
      educations.forEach((education) => {

        const data = {
          is_active: true,
          education_id: education.education_id,
          group_id: groupId,
        }

        axiosRequests.push(axiosInstance.post(`/groups/${groupId}/educations/add/`, data))
      });

      axios.all(axiosRequests)
      .then((responses) => {
        console.log("addEducationToGroup responses", responses);
        dispatch({ type: CREATE_EDUCATION_SUCCESS })
      })
      .catch((error) => {
        console.log("addEducationToGroup error", error);
        if(error.response && error.response.data) {
          dispatch({ type: CREATE_EDUCATION_FAILURE, payload: error.response.data });
        } else {
          dispatch({ type: CREATE_EDUCATION_FAILURE, payload: error });
        }
      })
    }
  })
}

export function showGroupList(url) {
    
  return (dispatch, getState) => {
    let instance = getState().user.axiosInstance;

    instance.get(url)
    .then((response) => {
      dispatch({ type: SHOW_GROUPLIST, payload: response.data.results })
    })
    .catch(function (error) {
      console.log("error showGroupList", url, error);
    });
  }
}


export function showSuggestionList(url) {
    
  return (dispatch, getState) => {
    let instance = getState().user.axiosInstance;

    instance.get(url)
    .then((response) => {
      dispatch({ type: SHOW_SUGGESTIONLIST, payload: response.data })
    })
    .catch(function (error) {
      console.log("error showSuggestionList", url, error);
    });
  }
}
