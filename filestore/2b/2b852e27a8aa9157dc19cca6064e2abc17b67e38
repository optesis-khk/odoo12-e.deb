import React from 'react';
import { connect } from 'react-redux';
import Form from "react-jsonschema-form";
import {SUBMIT_FORM,CREATE_FORM_ENTRY} from '../../actions/user';
import { TEXTAREA_ROWS_NUMBER} from './FormsConstants';
import logo_spinner from '../../../public/assets/img/spinner.gif';
import {Empty} from '../../actions/user'
import 'react-pure-modal/dist/react-pure-modal.min.css';
import { Parser } from 'html-to-react';
var to_remove=["b5227707-54fd-4e20-ad18-283034a78b09","2128602f-50ac-4ba2-a4c3-e77a12f2c688"];
export var PROPERTIES={};
export var UISCHEMA={}
export var schema={
  "title": "",
  "description": "",
  "type": "object",
  "required": [ 
  ],
 "properties": {
  }
};
var formData= {
  };
export function DisabledFields(field, desabledFiels){
    
    return desabledFiels.indexOf(field.id)>=0
}
export function InitialFields()
  {
   var FIELDS={
        'Single line text':{widget:'', type:'string'},
        'Multi line text':{widget:'textarea', type:'string'},
        'Email':{widget:'email', type:'email'},
        'Date':{widget:'alt-date', type:'date'},
        'File upload':{widget:'file', type:'file'},
        'Radio buttons':{widget:'radio', type:'boolean'},
        'Drop down':{widget:'checkboxes', type:'select'},
        'Check boxes':{widget:'checkboxes', type:'checkboxes'},
        'Check boxe':{widget:'checkboxes', type:'checkboxes'},
        'Number':{widget:'updown', type:'number'},
        'Page break':{widget:'', type:'array'},
        'URL':{widget:'', type:'string'}
   };
   return FIELDS;
  }

var REQUIRED=[];
var uiSchema={
};
class GetContactForm extends React.Component{

  constructor(props) {
    super(props);
    this.state={
      email_to:'',
      status:false,
      spinner_status:false,
      modal: false,
      PROPERTIES:{},
      UISCHEMA:{},
      REQUIRED:[],
      show:false,
      initialize_state:true,
      additional_required_fields:[],
      desabledFiels:[]
    }
    this.Json2Form=this.Json2Form.bind(this);
    this.Submission=this.Submission.bind(this);
    this.toggle = this.toggle.bind(this);
    this.handleFormChanges=this.handleFormChanges.bind(this);
    this.renderForm=this.renderForm.bind(this);
  }
  toggle() {
    this.setState({
      modal: !this.state.modal
    });
  }
  renderForm(){
    this.props.fields.map((field)=>{
      if(field){
        return(
          this.Json2Form(field)
        )
      }
    }); 
  }
  handleFormChanges(data){
    var concerve_data=data.formData;
    if(data.formData["40eb2eb0-144a-4fba-bc7b-d03050c34b51"]==="Dans une équipe"){
      const old_required_fields=this.state.additional_required_fields.filter(obj=>obj!=="b5227707-54fd-4e20-ad18-283034a78b09");
      old_required_fields.push("b5227707-54fd-4e20-ad18-283034a78b09");
      this.setState({desabledFiels:this.state.desabledFiels.filter(obj=>obj!=="b5227707-54fd-4e20-ad18-283034a78b09"),additional_required_fields:old_required_fields});
      this.renderForm();
      formData=concerve_data;
      const required_fields=REQUIRED.concat(this.state.additional_required_fields)
      this.setState({REQUIRED:required_fields,PROPERTIES:PROPERTIES,UISCHEMA:UISCHEMA});
      REQUIRED=[];
      PROPERTIES={};
      UISCHEMA={};
    }
    else if(data.formData["40eb2eb0-144a-4fba-bc7b-d03050c34b51"]!=="Dans une équipe"){
      this.setState({desabledFiels:["b5227707-54fd-4e20-ad18-283034a78b09","2128602f-50ac-4ba2-a4c3-e77a12f2c688"],additional_required_fields:[]});
      concerve_data["b5227707-54fd-4e20-ad18-283034a78b09"]=undefined;
      concerve_data["2128602f-50ac-4ba2-a4c3-e77a12f2c688"]=undefined;
      this.renderForm()
      formData=concerve_data;
      const required_fields=REQUIRED.concat(this.state.additional_required_fields)
      this.setState({REQUIRED:required_fields,PROPERTIES:PROPERTIES,UISCHEMA:UISCHEMA});
      REQUIRED=[];
      PROPERTIES={};
      UISCHEMA={};
    }
    
    if(data.formData["b5227707-54fd-4e20-ad18-283034a78b09"]==="Autre"){
      console.log(this.state.desabledFiels, this.state.additional_required_fields,this.state.show);
      if(!this.state.show){
      this.setState({desabledFiels:[],show:true,additional_required_fields:["b5227707-54fd-4e20-ad18-283034a78b09","2128602f-50ac-4ba2-a4c3-e77a12f2c688"], show:true});
      this.renderForm();
      formData=concerve_data;
      const required_fields=REQUIRED.concat(["b5227707-54fd-4e20-ad18-283034a78b09","2128602f-50ac-4ba2-a4c3-e77a12f2c688"])
      this.setState({REQUIRED:required_fields,PROPERTIES:PROPERTIES,UISCHEMA:UISCHEMA,desabledFiels:[]});
      REQUIRED=[];
      PROPERTIES={};
      UISCHEMA={};
      }
    }else{
       console.log("Second")
       concerve_data["2128602f-50ac-4ba2-a4c3-e77a12f2c688"]=undefined;
       if(data.formData["40eb2eb0-144a-4fba-bc7b-d03050c34b51"]==="Dans une équipe"){
         this.setState({desabledFiels:["2128602f-50ac-4ba2-a4c3-e77a12f2c688"],additional_required_fields:["b5227707-54fd-4e20-ad18-283034a78b09"]});
       }else{
        this.setState({desabledFiels:["b5227707-54fd-4e20-ad18-283034a78b09","2128602f-50ac-4ba2-a4c3-e77a12f2c688"],additional_required_fields:[]});
       }
       this.renderForm();
       formData=concerve_data;
       const required_fields=REQUIRED.concat(this.state.additional_required_fields)
       this.setState({REQUIRED:required_fields,PROPERTIES:PROPERTIES,UISCHEMA:UISCHEMA,show:false});
       REQUIRED=[];
       PROPERTIES={};
       UISCHEMA={};
    }
  }
  Submission(formData){
    var virtual_state={
      email_to:'',
      status:false,
    }
    const data=formData.formData;
    var fields=[];
    this.props.fields.map((field)=>{
     if(field.field_type!='Page break'){
      if(typeof data[`${field.id}`]!='object'){
        if(field.field_type=='Email' && !virtual_state.status){
          virtual_state.status=true;
          virtual_state.email_to=data[`${field.id}`]
        }
          return fields.push({value:data[`${field.id}`]||"" ,field_id:field.id, label:field.label})
        
      }
      else{
        var vall="";
        data[`${field.id}`].map((val)=>{
            return vall+=val+','
        });
          return fields.push({value:vall.trim().slice(0, -1),field_id:field.id, label:field.label})
        
      }
     }
    });
    const entry_data={email_to:virtual_state.email_to || ""};
    this.props.Empty('HANDLE_SUBMIT_FORM')
    this.props.createFormEntryAnonymous(CREATE_FORM_ENTRY, entry_data,SUBMIT_FORM,this.props.formId,this.props.clientId, {fields:fields, is_submitted:"true"});
  }
Json2Form(fieldConfig){
    const properties=InitialFields()[fieldConfig.field_type];
    var parser= new Parser()
  if (fieldConfig.required){
      REQUIRED.push(fieldConfig.id);
    }

  if(properties.type=='email'){
    PROPERTIES[fieldConfig.id]={
      "type": "string",
      "format": "email",
      "title":fieldConfig.label,

    };
     UISCHEMA[fieldConfig.id]={
      "ui:placeholder":fieldConfig.placeholder_text,
      "classNames":fieldConfig.style_class,
      "ui:disabled":DisabledFields(fieldConfig, this.state.desabledFiels),
      "ui:description":parser.parse(fieldConfig.description)
    }
  }
  else if(properties.type=='date'){
    PROPERTIES[fieldConfig.id]={
      type:'string',
      format: "date",
      title:fieldConfig.label=""?fieldConfig.id:fieldConfig.label
    };
    UISCHEMA[fieldConfig.id]={
      a_date: {
        "alt-date": {
          "ui:widget": "alt-date",
          "ui:disabled":DisabledFields(fieldConfig, this.state.desabledFiels),
          "ui:options":{
            yearsRange: [1980, 2030],
            hideNowButton: true,
            hideClearButton: true,
          },
        },
      },
    }
  }
  else if(properties.type=='file'){
    PROPERTIES[fieldConfig.id]={
      "type": "string",
      "format": "data-url",
      "title":fieldConfig.label
    }
  }else if(properties.type=='tel'){
    PROPERTIES[fieldConfig.id]={
      type:properties.type,
      title:fieldConfig.label=""?fieldConfig.id:fieldConfig.label
    };
    UISCHEMA[fieldConfig.id]={
      "ui:widget":properties.widget,
      "ui:title":fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
      "ui:placeholder":fieldConfig.placeholder_text,
      "classNames":fieldConfig.style_class,
      "ui:help":parser.parse(fieldConfig.help_text),
      "ui:disabled":DisabledFields(fieldConfig, this.state.desabledFiels),
      "ui:description":parser.parse(fieldConfig.description)
    }
  }else if(properties.type=='checkboxes'){
    PROPERTIES[fieldConfig.id]=
    {
      type: "array",
      minItems: 1,
      title: fieldConfig.label,
      items: {
        type: "string",
        enum:  fieldConfig.choices.split(','),
      },
      uniqueItems: true
    };
    UISCHEMA[fieldConfig.id]={
      "ui:widget":properties.widget,
      "classNames":fieldConfig.style_class,
      "ui:description":parser.parse(fieldConfig.description),
      "ui:disabled":DisabledFields(fieldConfig, this.state.desabledFiels),
    }
  }else if(properties.type=='boolean'){
    PROPERTIES[fieldConfig.id]={
      title:fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
      type: "string",
      enum:  fieldConfig.choices.split(','),
    };
    UISCHEMA[fieldConfig.id]={
      "ui:widget":"radio",
      "classNames":fieldConfig.style_class,
      "ui:help":parser.parse(fieldConfig.help_text),
      "ui:disabled":DisabledFields(fieldConfig, this.state.desabledFiels),
      "ui:description":parser.parse(fieldConfig.description)
    }
  }else if(properties.type=='select'){
    PROPERTIES[fieldConfig.id]={
      type:"string",
      title:fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
      "enum": fieldConfig.choices.split(',')
    };
    UISCHEMA[fieldConfig.id]={
      "classNames":fieldConfig.style_class,
      "ui:placeholder":fieldConfig.placeholder_text,
      "ui:disabled":DisabledFields(fieldConfig, this.state.desabledFiels),
      "ui:description":parser.parse(fieldConfig.description)
    }
  }else if(properties.type=='array'){

  }else{
    PROPERTIES[fieldConfig.id]={
      type:properties.type,
      title:fieldConfig.label=""?fieldConfig.id:fieldConfig.label
    };
    if(properties.widget==''){
         UISCHEMA[fieldConfig.id]={
          "ui:title":fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
          "classNames":fieldConfig.style_class,
          "ui:placeholder":fieldConfig.placeholder_text,
          "ui:help":parser.parse(fieldConfig.help_text),
          "ui:disabled":DisabledFields(fieldConfig, this.state.desabledFiels),
          "ui:description":parser.parse(fieldConfig.description)
        }
      }else if(properties.widget==='textarea'){
        UISCHEMA[fieldConfig.id]={
          "ui:widget":properties.widget,
          "classNames":fieldConfig.style_class,
          "ui:title":fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
          "ui:placeholder":fieldConfig.placeholder_text,
          "ui:help":parser.parse(fieldConfig.help_text),
          "ui:description":parser.parse(fieldConfig.description),
          "ui:disabled":DisabledFields(fieldConfig, this.state.desabledFiels),
          "ui:options": {
            rows: TEXTAREA_ROWS_NUMBER
          }
        }
      }
      else{
        UISCHEMA[fieldConfig.id]={
          "ui:widget":properties.widget,
          "classNames":fieldConfig.style_class,
          "ui:title":fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
          "ui:placeholder":fieldConfig.placeholder_text,
          "ui:help":parser.parse(fieldConfig.help_text),
          "ui:disabled":DisabledFields(fieldConfig, this.state.desabledFiels),
          "ui:description":parser.parse(fieldConfig.description)
        }
      }
  }
  }
  componentWillReceiveProps(nextProps) {
    if(nextProps.spinner_status===false){
      REQUIRED=[];
    }
    if(nextProps.success){
      formData={};
      this.renderForm()
      this.setState({REQUIRED:REQUIRED,PROPERTIES:PROPERTIES,UISCHEMA:UISCHEMA});
      REQUIRED=[];
      PROPERTIES={};
      UISCHEMA={};
    }
    if(this.state.initialize_state){
      if(nextProps.fields){
        nextProps.fields.map((field)=>{
          if(field){
            return(
              this.Json2Form(field)
            )
          }
        });
        this.setState({REQUIRED:REQUIRED,PROPERTIES:PROPERTIES,UISCHEMA:UISCHEMA,desabledFiels:["b5227707-54fd-4e20-ad18-283034a78b09","2128602f-50ac-4ba2-a4c3-e77a12f2c688"]})
      }

    }
 }
  render() {

    schema['title']=this.props.title;
    schema['description']="";
    schema["properties"]=this.state.PROPERTIES;
    schema["required"]=this.state.REQUIRED;
    uiSchema=this.state.UISCHEMA;
    const { t } = this.props;
    return(
  <div>
  <div className="row">
  <Form 
    schema={schema}
    uiSchema={uiSchema}
    onSubmit={this.Submission}
    onChange={this.handleFormChanges}
    formData={formData}
    >

        {this.props.spinner_status===true?<div className="text-center"><img  width={100} src={logo_spinner} className="Form-logo-spinner" alt="logo" /></div> : 
  <div className="col-md-12">
    <button
          className="btn btn-md btn-black form-full text-center" type="submit" id="form-submit" name="submit"
        >
          {this.props.textbtn}
        </button>
        </div>
    }
    </Form>
    <br/>
    </div>
    </div>
    )
  }
}
function mapStateToProps(state){
  return {
    success: state.dynamicform.success,
    error: state.dynamicform.error,
    spinner_status:state.dynamicform.spinner_status,
  }
} 
export default connect(mapStateToProps, {Empty})(GetContactForm); 