
from rest_framework.authtoken.models import Token
from profilesapp.serializers.profile_account_type_period import *
from profilesapp.serializers.profile_area_of_interest import *
from profilesapp.serializers.profile_connexion import *
from profilesapp.serializers.profile_area import *
from profilesapp.serializers.profile_education import *
from profilesapp.serializers.profile_favorite_company import *
from profilesapp.serializers.profile_favorite_opportunity import *
from profilesapp.serializers.profile_language import *
from profilesapp.serializers.profile_mail import *
from profilesapp.serializers.profile_admin_role import *
from profilesapp.serializers.profile_industry import *
from profilesapp.serializers.profile_occupation import *
from profilesapp.serializers.profile_position import *
from profilesapp.serializers.profile_profile_disability import *
from profilesapp.serializers.profile_profile_language import *
from profilesapp.serializers.profile_profile_industry import *
from profilesapp.serializers.profile_profile_occupation import *
from profilesapp.serializers.profile_register import ProfileRegisterSerializer
from profilesapp.serializers.profile_settings import ProfileSettingsSerializer, ProfileDefaultsSettingsSerializer
from profilesapp.serializers.profile_spontaneous_company import *
from profilesapp.serializers.profile_wutiko_app_contact import *
from profilesapp.serializers.profile import *
from rest_framework.test import APIRequestFactory
from rest_framework.test import APITestCase
from mixer.backend.django import mixer
from locationsapp.models.location_city import City
from locationsapp.models.location_country import Country
from locationsapp.models.location_state_province import StateProvince
from profilesapp.models.profile import Profile
from companiesapp.models.company import Company
from companiesapp.models.company_legal import CompanyLegalForm
from oauth2_provider.models import AccessToken, Application
from rest_framework.request import Request
from companiesapp.models.company_department import CompanyDepartment
from profilesapp.utils import random_string_test, random_string_new_test
from wutiko.variables import global_variables, profilesapp_variables
from profilesapp.models.profile_application_client_id import ProfileApplicationClient
from oauth2_provider.models import Application
from companiesapp.models.company_application_client_id import CompanyApplicationClient
from opportunitiesapp.models.opportunity_application_client_id import OpportunityApplicationClient
from django.utils import timezone



factory = APIRequestFactory()

class NonAuthenticatedUserProfileRegisterTest(APITestCase):
    """
    Registered user should be associated with an application (app_client_id)!
    """
    def setUp(self):
        self.profile_user = Profile.objects.create(first_name=global_variables.SUPERUSER_NAME, last_name=global_variables.SUPERUSER_NAME, email='dio10p@wutiko.com', password=global_variables.SUPERUSER_PASSWORD,)
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.html_info = mixer.blend(ApplicationHtmlInfo, client_id=self.apps, created_by=self.profile_user, modified_by=self.profile_user, application_domain=self.apps.name, application_name=self.apps.name)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile_user)
        self.app_client_id = str(self.apps.client_id)
        self.profile_user.app_client_id = str(self.app_client_id)
        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileRegisterSerializer(self.profile_user, context=serializer_context).data

    def test_non_authenticated_user_can_register_profile(self):
        """
        With complete provided  user info, the expected result is a successfully message!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/register/?client=' + str(self.apps.client_id)
        self.data['email'] = random_string_test() + "@hotmail.com"

        response = self.client.post(url, self.data, format='json')
        self.assertEqual(self.profile_user.first_name, self.data['first_name'])
        self.assertEqual(self.profile_user.last_name, self.data['last_name'])
        self.assertFalse(self.profile_user.is_active)
        self.assertFalse(self.profile_user.account_status)
        self.assertEqual(response.status_code, 200)


class NonAuthenticatedUserProfileRegisterWithInvalidEmailTest(APITestCase):
    """
    Registered user should be associated with an application (app_client_id)!
    """
    def setUp(self):
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.app_client_id = str(self.apps.client_id)
        self.profile_user = Profile.objects.create(first_name=global_variables.SUPERUSER_NAME, last_name=global_variables.SUPERUSER_NAME, email='dio10p', password=global_variables.SUPERUSER_PASSWORD,)
        self.profile_user.app_client_id = str(self.app_client_id)
        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileRegisterSerializer(self.profile_user, context=serializer_context).data

    def test_non_authenticated_user_can_register_with_invalid_profile_email(self):
        """
        With wrong email in the provided user info, the expected result is a failure message!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE_ACCOUNT_REGISTER
        self.data['email'] = random_string_test() + "@hotmail.com"
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(self.profile_user.first_name, self.data['first_name'])
        self.assertEqual(self.profile_user.last_name, self.data['last_name'])
        self.assertFalse(self.profile_user.is_active)
        self.assertFalse(self.profile_user.account_status)
        self.assertEqual(response.status_code, 400)


class NonAuthenticatedUserProfileRegisterWithWeekPasswordTest(APITestCase):
    """
    Registered user should be associated with an application (app_client_id)!
    """
    def setUp(self):
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.app_client_id = str(self.apps.client_id)
        self.profile_user = Profile.objects.create(first_name=global_variables.SUPERUSER_NAME, last_name=global_variables.SUPERUSER_NAME, email=global_variables.SUPERUSER_USERNAME, password='pass')
        self.profile_user.app_client_id = str(self.app_client_id)

        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileRegisterSerializer(self.profile_user, context=serializer_context).data

    def test_non_authenticated_user_can_not_register_with_week_profile_password(self):
        """
        With missing weak password in the provided user info, the expected result is a failure message!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE_ACCOUNT_REGISTER
        self.data['email'] = random_string_test() + "@hotmail.com"
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(self.profile_user.first_name, self.data['first_name'])
        self.assertEqual(self.profile_user.last_name, self.data['last_name'])
        self.assertFalse(self.profile_user.is_active)
        self.assertFalse(self.profile_user.account_status)
        self.assertEqual(response.status_code, 401)
        self.assertEqual(response.data, {'error': 'Your password must be at least 8 characters long'})


class NonAuthenticatedUserProfileRegisterWithMissingInfoTest(APITestCase):
    """
    Registered user should be associated with an application (app_client_id)!
    and the test fails for missing password
    """
    def setUp(self):
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.app_client_id = str(self.apps.client_id)
        self.profile_user = Profile.objects.create(first_name=global_variables.SUPERUSER_NAME, last_name=global_variables.SUPERUSER_NAME, email=global_variables.SUPERUSER_USERNAME, password='')
        self.profile_user.app_client_id = str(self.app_client_id)

        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileRegisterSerializer(self.profile_user, context=serializer_context).data

    def test_non_authenticated_user_can_not_register_with_missing_profile_password(self):
        """
        With missing password in the provided user info, the expected result is a failure message!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE_ACCOUNT_REGISTER
        self.data['email'] = random_string_test() + "@hotmail.com"
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(self.profile_user.first_name, self.data['first_name'])
        self.assertEqual(self.profile_user.last_name, self.data['last_name'])
        self.assertFalse(self.profile_user.is_active)
        self.assertFalse(self.profile_user.account_status)
        self.assertEqual(response.status_code, 400)

class NonAuthenticatedUserProfileRegisterWithMissingEmailTest(APITestCase):
    """
    Registered user should be associated with an application (app_client_id)!
    and the test fails for missing email
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()

        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.app_client_id = str(self.apps.client_id)
        self.profile_user = Profile.objects.create(first_name=global_variables.SUPERUSER_NAME, last_name=global_variables.SUPERUSER_NAME, email='', password=global_variables.SUPERUSER_PASSWORD,)
        self.profile_user.app_client_id = str(self.app_client_id)

        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileRegisterSerializer(self.profile_user, context=serializer_context).data

    def test_non_authenticated_user_can_not_register_with_missing_profile_email(self):
        """
        With missing email in the provided user info, the expected result is a failure message!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE_ACCOUNT_REGISTER
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(self.profile_user.first_name, self.data['first_name'])
        self.assertEqual(self.profile_user.last_name, self.data['last_name'])
        self.assertFalse(self.profile_user.is_active)
        self.assertFalse(self.profile_user.account_status)
        self.assertEqual(response.status_code, 400)

class NonAuthenticatedUserProfileRegisterWithMissingFirstNameTest(APITestCase):
    """
    Registered user should be associated with an application (app_client_id)!
    and the test successes for missing first_name
    """
    def setUp(self):
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.app_client_id = str(self.apps.client_id)
        self.profile_user = Profile.objects.create(first_name='', last_name=global_variables.SUPERUSER_NAME, email=global_variables.SUPERUSER_USERNAME, password=global_variables.SUPERUSER_PASSWORD)
        self.profile_user.app_client_id = str(self.app_client_id)

        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileRegisterSerializer(self.profile_user, context=serializer_context).data

    def test_non_authenticated_user_can_not_register_with_missing_profile_first_name(self):
        """
        With missing first_name in the provided user info, the expected result is a failure message!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE_ACCOUNT_REGISTER
        self.data['email'] = random_string_test() + "@hotmail.com"
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(self.profile_user.first_name, self.data['first_name'])
        self.assertEqual(self.profile_user.last_name, self.data['last_name'])
        self.assertFalse(self.profile_user.is_active)
        self.assertFalse(self.profile_user.account_status)

        # The test should pass as the first_name is not compulsory on backed side!
        self.assertEqual(response.status_code, 400)

class NonAuthenticatedUserProfileRegisterWithMissingLaststNameTest(APITestCase):
    """
    Registered user should be associated with an application (app_client_id)!
    and the test successes for missing last_name
    """
    def setUp(self):
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.app_client_id = str(self.apps.client_id)
        self.profile_user = Profile.objects.create(first_name=global_variables.SUPERUSER_NAME, last_name='', email=global_variables.SUPERUSER_USERNAME, password=global_variables.SUPERUSER_PASSWORD,)
        self.profile_user.app_client_id = str(self.app_client_id)

        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileRegisterSerializer(self.profile_user, context=serializer_context).data

    def test_non_authenticated_user_can_not_register_with_missing_profile_last_name(self):
        """
        With missing last_name in the provided user info, the expected result is a failure message!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE_ACCOUNT_REGISTER
        self.data['email'] = random_string_test() + "@hotmail.com"
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(self.profile_user.first_name, self.data['first_name'])
        self.assertEqual(self.profile_user.last_name, self.data['last_name'])
        self.assertFalse(self.profile_user.is_active)
        self.assertFalse(self.profile_user.account_status)
        # The test should pass as the last_name is not compulsory on backed side!
        self.assertEqual(response.status_code, 400)

class NonAuthenticatedUserProfileRegisterWithInvalidEmailTest(APITestCase):
    """
    Registered user should be associated with an application (app_client_id)!
    and the test fails for invalid email
    """
    def setUp(self):
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.app_client_id = str(self.apps.client_id)
        self.profile_user = Profile.objects.create(first_name=global_variables.SUPERUSER_NAME, last_name=global_variables.SUPERUSER_NAME, email='12345', password=global_variables.SUPERUSER_PASSWORD,)
        self.profile_user.app_client_id = str(self.app_client_id)

        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileRegisterSerializer(self.profile_user, context=serializer_context).data

    def test_non_authenticated_user_can_not_register_with_invalid_profile_email(self):
        """
        With missing email in the provided user info, the expected result is a failure message!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE_ACCOUNT_REGISTER
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(self.profile_user.first_name, self.data['first_name'])
        self.assertEqual(self.profile_user.last_name, self.data['last_name'])
        self.assertFalse(self.profile_user.is_active)
        self.assertFalse(self.profile_user.account_status)
        self.assertEqual(response.status_code, 400)


class NonAuthenticatedUserProfileRegisterWithInvalidApplicationTest(APITestCase):
    """
    Registered user should be associated with an application (app_client_id)!
    and the test successes for any application
    """
    def setUp(self):
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.app_client_id = str(self.apps.client_id)
        self.profile_user = Profile.objects.create(first_name=global_variables.SUPERUSER_NAME, last_name=global_variables.SUPERUSER_NAME, email=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)

        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileRegisterSerializer(self.profile_user, context=serializer_context).data
        self.data['app_client_id'] = 1
        self.data['email'] = random_string_test() + "@hotmail.com"
        # self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile_user)

    def test_non_authenticated_user_cannot_register_with_invalid_application(self):
        """
        With any app_client_id in the provided user info, the expected result is an unsuccessful message!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE_ACCOUNT_REGISTER
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(self.profile_user.first_name, self.data['first_name'])
        self.assertEqual(self.profile_user.last_name, self.data['last_name'])
        self.assertFalse(self.profile_user.is_active)
        self.assertEqual(response.status_code, 400)
        # self.assertEqual(response.status_code, 200)


class NonAuthenticatedUserActivateMultipleEmailTest(APITestCase):
    """
    Registered user should be associated with an application (app_client_id)!
    and the test successes for exiting inactive account! The user should be sent a link for
    resetting his password!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile_email = mixer.blend(ProfileMail, profile_id=self.profile, created_by=self.profile, modified_by=self.profile)
        self.data = ProfileMailAddSerializer(self.profile_email).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)

    def test_non_authenticated_user_can_not_activate_new_added_emails(self):
        """
        The user will not have access to the corresponding endpoint as the
        authentication credentials are not provided!
        """

        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + 'profile-emails/' + str(self.profile_email.id) + '/activate/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserProfileLoginTest(APITestCase):
    """
    Registered user is automatically logged out and logged in again !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.logout()
        self.data = ProfileLoginSerializer(self.superuser).data

    def test_connected_new_user_can_login(self):
        """
        With valid user credentials in the provided user info, the expected result is a successful message!
        """
        self.assertEqual(self.superuser.email, self.data['email'])
        self.assertTrue(self.superuser.is_active)
        self.assertEqual(self.superuser.account_status, 1)
        self.assertEqual(self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,), True)

class NonAuthenticatedUserReadProfileSettingsTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to his settings !
    """

    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.token = Token.objects.create(user=self.superuser)
        self.token.save()
        self.application = mixer.blend(Application)
        self.access_token = mixer.blend(AccessToken, user=self.superuser,  token=self.token, application=self.application, expires='2018-11-28T13:52:43Z')
        self.profile = mixer.blend(Profile, default_language=None)
        self.data = ProfileSettingsSerializer(self.profile).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_profile_settings_info_though_token(self):
        """
        Since the user in not connected, the expected result is a failure message due to
        the lack of valid authentication credentials for the target resource. !
        """

        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/'
        response = self.client.get(url + str(self.token) + '/view/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUnableReadProfileSettingsTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to his settings !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.token = Token.objects.create(user=self.superuser)
        self.token.save()
        self.application = mixer.blend(Application)
        self.access_token = mixer.blend(AccessToken, user=self.superuser,  token=self.token, application=self.application, expires='2015-11-28T13:52:43Z')
        self.profile = mixer.blend(Profile, default_language=None)
        self.data = ProfileSettingsSerializer(self.profile).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)


    def test_non_authenticated_user_can_not_not_read_profile_settings_info_though_expired_token(self):
        """
        Since the user in not connected, the expected result is a failure message due to
        the lack of valid authentication credentials for the target resource. !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/'
        response = self.client.get(url + str(self.token) + '/view/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadProfileTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to his profile detailed info !
    """
    def setUp(self):
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileListSerializer(self.profile, context=serializer_context).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)

    def test_non_authenticated_user_can_not_read_profile_list(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_list_all_registered_users(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/all/'
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 401)


    def test_non_authenticated_user_can_not_read_list_of_latest_3_connected_users(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/list/latest/'
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadProfileDetailTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to view his profiles detailed info !
    """
    def setUp(self):
        self.profile = mixer.blend(Profile, default_language=None)
        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileViewSerializer(self.profile, context=serializer_context).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)

    def test_non_authenticated_user_can_not_read_his_profile_details(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.slug) + '/', format='json')
        self.assertEqual(response.status_code, 401)

class NonAuthenticatedUserUpdateProfileTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to edit his profiles detailed info !
    """
    def setUp(self):
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile.first_name = global_variables.SUPERUSER_NAME
        self.profile.last_name = global_variables.SUPERUSER_NAME
        self.profile.photo = None
        self.profile.cover_photo = None
        self.data = ProfileEditSerializer(self.profile).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)

    def test_non_authenticated_user_can_not_deactivate_profile(self):
        """
        Authentication credentials will be asked !
        """
        data = self.data.update({'account_status': 2})
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/'
        response = self.client.put(url + str(self.profile.id) + '/deactivate/?client=' + str(self.apps.client_id), data, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_edit_profile(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profile.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


    def test_non_authenticated_user_can_not_edit_profile_settings_info_though_id(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/settings/'
        response = self.client.get(url + str(self.profile.id) + '/edit/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)

class NonAuthenticatedUserActivatingProfileTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.profile = mixer.blend(Profile, account_status=2,  default_language=None, photo=None,cover_photo=None)
        self.data = Profile1Serializer(self.profile).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)

    def test_non_authenticated_user_can_not_reactivate_profile(self):
        """
        Authentication credentials will be asked !
        """
        data = self.data.update({'account_status': 3})
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/'
        response = self.client.put(url + str(self.profile.id) + '/reactivate/?client=' + str(self.apps.client_id), data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveProfileTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to view his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.profile = mixer.blend(Profile, default_language=None, photo=None,cover_photo=None)
        self.data = Profile1Serializer(self.profile).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_profile(self):
        """
        Authentication credentials will be asked !
        """
        self.data = self.data.update({'account_status': 4})
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/'
        response = self.client.put(url + str(self.profile.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)

class NonAuthenticatedUserCreateProfileAccountTypeTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.profile = mixer.blend(Profile, default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType,created_by=self.profile, modified_by=self.profile)
        self.data = ProfileAccountTypeAddSerializer(self.profile_account_type).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_add_a_profile_account_type(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/type/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)

class NonAuthenticatedUserCreateProfileAccountTypePeriodTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.profile = mixer.blend(Profile,  default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.profile, modified_by=self.profile)
        self.profile_account_type_period = mixer.blend(ProfileAccountTypePeriod, account_type_id=self.profile_account_type, created_by=self.profile, profile_id=self.profile)
        self.data = ProfileAccountTypePeriodAddSerializer(self.profile_account_type_period).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_add_a_profile_account_type_period(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/type/period/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)

class NonAuthenticatedUserReadProfileAccountTypeTest(APITestCase):
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city,state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.profile, modified_by=self.profile)
        self.data = ProfileAccountTypeAddSerializer(self.profile_account_type).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_a_profile_account_type(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/type/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)

class NonAuthenticatedUserReadProfileAccountTypePeriodTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city, state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.profile, modified_by=self.profile)
        self.profile_account_type_period = mixer.blend(ProfileAccountTypePeriod, account_type_id=self.profile_account_type, created_by=self.profile, profile_id=self.profile)
        self.data = ProfileAccountTypePeriodAddSerializer(self.profile_account_type_period).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_a_profile_account_type_period(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/type/period/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)



class NonAuthenticatedUserUnableToReadProfileAccountTypeWithTokenPeriodTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.token = Token.objects.create(user=self.superuser)
        self.token.save()
        self.token_id = self.token
        self.application = mixer.blend(Application)
        self.access_token = mixer.blend(AccessToken, user=self.superuser,  token=self.token, application=self.application, expires='2016-11-28T13:52:43Z')
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.superuser, modified_by=self.superuser)
        self.profile_account_type_period = mixer.blend(ProfileAccountTypePeriod, account_type_id=self.profile_account_type, created_by=self.superuser, profile_id=self.superuser,  end_date='2017-10-28T13:52:43Z')
        self.data = ProfileAccountTypePeriodAddSerializer(self.profile_account_type_period).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_not_read_his_profile_account_type_period_detail_info_through_expired_token(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.token_id) + '/account/type/period/active/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadProfileAccountTypeWithTokenPeriodTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.token = Token.objects.create(user=self.superuser)
        self.token.save()
        self.token_id = self.token
        self.application = mixer.blend(Application)
        self.access_token = mixer.blend(AccessToken, user=self.superuser,  token=self.token, application=self.application, expires='2019-12-28T13:52:43Z')
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.superuser, modified_by=self.superuser)
        self.profile_account_type_period = mixer.blend(ProfileAccountTypePeriod, account_type_id=self.profile_account_type, created_by=self.superuser, profile_id=self.superuser,  end_date='2018-12-28T13:52:43Z')
        self.data = ProfileAccountTypePeriodAddSerializer(self.profile_account_type_period).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_his_profile_account_type_period_detail_info_through_token(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.token_id) + '/account/type/period/active/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)

class NonAuthenticatedUserRemoveProfileAccountTypePeriodTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.token = Token.objects.create(user=self.superuser)
        self.token.save()
        self.token_id = self.token
        self.application = mixer.blend(Application)
        self.access_token = mixer.blend(AccessToken, user=self.superuser,  token=self.token, application=self.application, expires='2019-11-28T13:52:43Z')
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.superuser, modified_by=self.superuser)
        self.profile_account_type_period = mixer.blend(ProfileAccountTypePeriod, account_type_id=self.profile_account_type, created_by=self.superuser, profile_id=self.superuser,  end_date='2018-12-28T13:52:43Z')
        self.data = ProfileAccountTypePeriodAddSerializer(self.profile_account_type_period).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_a_profile_account_type_period(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.delete(url + str(self.profile_account_type_period.id) + '/account/type/period/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)



class NonAuthenticatedUserUpdateProfileAccountTypeTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city,state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType,created_by=self.profile, modified_by=self.profile)
        self.data = ProfileAccountTypeAddSerializer(self.profile_account_type).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_edit_a_profile_account_type(self):
        """
        Fail if the Authentication credentials are not provided !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profile_account_type.id) + '/account/type/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)

class NonAuthenticatedUserRemoveProfileAccountTypeTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city, state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType,created_by=self.profile, modified_by=self.profile)
        self.data = ProfileAccountTypeAddSerializer(self.profile_account_type).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_a_profile_account_type(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.delete(url + str(self.profile_account_type.id) + '/account/type/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code,401)


class NonAuthenticatedUserCreateIndustryTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.industry = mixer.blend(Industry)
        self.data = IndustryAddSerializer(self.industry).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_an_industry(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/industries/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreateSkillTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.skill = mixer.blend(Skill)
        self.data = SkillAddSerializer(self.skill).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_a_skill(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/skills/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreatePositionTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.position = mixer.blend(Position)
        self.data = PositionAddSerializer(self.position).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_a_position(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/positions/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreateEducationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.education_level = mixer.blend(EducationLevel)
        self.education = mixer.blend(Education)
        self.data = EducationAddSerializer(self.education).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_a_education(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/educations/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreateProfileAreaTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest)
        self.data = ProfileAreaOfInterestAddSerializer(self.area).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_an_area(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/areaofinterests/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreateOccupationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.occupation = mixer.blend(Occupation,)
        self.data = OccupationAddSerializer(self.occupation).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_a_occupation(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/occupations/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreateLanguageTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.language = mixer.blend(Language, )
        self.data = LanguageAddSerializer(self.language).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_a_language(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/languages/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadIndustryTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """

    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.industry = mixer.blend(Industry, )
        self.data = IndustryAddSerializer(self.industry).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_an_industry(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/industries/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_industry_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/industries/'
        response = self.client.get(url + str(self.industry.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadOccupationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.occupation = mixer.blend(Occupation, )
        self.data = OccupationAddSerializer(self.occupation).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_a_occupation(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/occupations/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_occupation_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/occupations/'
        response = self.client.get(url + str(self.occupation.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateIndustryTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.industry = mixer.blend(Industry, )
        self.data = IndustryAddSerializer(self.industry).data
        self.data.update({'name_en': 'Management'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_edit_an_industry(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/industries/'
        response = self.client.put(url + str(self.industry.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadSkillTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.skill = mixer.blend(Skill, created_by=self.profile, modified_by=self.profile)
        self.data = SkillAddSerializer(self.skill).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_a_skill(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/skills/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_skill_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/skills/'
        response = self.client.get(url + str(self.skill.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadTypeOfDisabilityTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability)
        self.data = TypeOfDisabilityAddSerializer(self.type_of_disability).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_a_type_of_disability(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/typesofdisability/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_typeofdisability_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/typesofdisability/'
        response = self.client.get(url + str(self.type_of_disability.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateSkillTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.skill = mixer.blend(Skill,)
        self.data = SkillAddSerializer(self.skill).data
        self.data.update({'name_en': 'Django'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_edit_a_skill(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/skills/'
        response = self.client.put(url + str(self.skill.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadPositionTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.position = mixer.blend(Position)
        self.data = PositionAddSerializer(self.position).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_a_position(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/positions/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_position_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/positions/'
        response = self.client.get(url + str(self.position.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdatePositionTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.position = mixer.blend(Position)
        self.data = PositionAddSerializer(self.position).data
        self.data.update({'title_en': 'Manager'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_edit_a_position(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/positions/'
        response = self.client.put(url + str(self.position.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadLanguageTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.language = mixer.blend(Language)
        self.data = LanguageAddSerializer(self.language).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_a_language(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/languages/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_language_detail(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/languages/'
        response = self.client.get(url + str(self.language.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadEducationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.education_level = mixer.blend(EducationLevel, )
        self.education = mixer.blend(Education, )
        self.data = EducationAddSerializer(self.education).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_an_education(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/educations/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_education_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/educations/'
        response = self.client.get(url + str(self.education.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadAreaTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest, )
        self.data = ProfileAreaOfInterestAddSerializer(self.area).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_an_area(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/areaofinterests/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_area_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/areaofinterests/'
        response = self.client.get(url + str(self.area.id) + '/view/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateEducationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.education_level = mixer.blend(EducationLevel, )
        self.education = mixer.blend(Education,)
        self.data = EducationAddSerializer(self.education).data
        self.data.update({'name': 'UCAD'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_edit_an_education(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/educations/'
        response = self.client.put(url + str(self.education.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateAreaTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest, )
        self.data = ProfileAreaOfInterestAddSerializer(self.area).data
        self.data.update({'name_en': 'Computer Security'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_edit_an_area(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/areaofinterests/'
        response = self.client.put(url + str(self.area.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateOccupationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.occupation = mixer.blend(Occupation, )
        self.data = OccupationAddSerializer(self.occupation).data
        self.data.update({'name_en': 'Programming'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_a_occupation(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/occupations/'
        response = self.client.put(url + str(self.occupation.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateLanguageTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.language = mixer.blend(Language,)
        self.data = LanguageEditSerializer(self.language).data
        self.data.update({'name_en': 'Spanish'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_edit_a_language(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/languages/'
        response = self.client.put(url + str(self.language.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveIndustryTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.industry = mixer.blend(Industry)
        self.data = IndustryAddSerializer(self.industry).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_an_industry(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/industries/'
        response = self.client.put(url + str(self.industry.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveSkillTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.skill = mixer.blend(Skill,)
        self.data = SkillAddSerializer(self.skill).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_a_skill(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/skills/'
        response = self.client.put(url + str(self.skill.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemovePositionTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.position = mixer.blend(Position)
        self.data = PositionAddSerializer(self.position).data
        self.data.update({'title_en': 'Manager'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_a_position(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/positions/'
        response = self.client.put(url + str(self.position.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveEducationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.education_level = mixer.blend(EducationLevel,)
        self.education = mixer.blend(Education, )
        self.data = EducationAddSerializer(self.education).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_an_education(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/educations/'
        response = self.client.put(url + str(self.education.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveAreaTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest, )
        self.data = ProfileAreaOfInterestAddSerializer(self.area).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_an_area(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/areaofinterests/'
        response = self.client.put(url + str(self.area.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveOccupationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.occupation = mixer.blend(Occupation, )
        self.data = OccupationAddSerializer(self.occupation).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_a_occupation(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/occupations/'
        response = self.client.put(url + str(self.occupation.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveLanguageTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.language = mixer.blend(Language,)
        self.data = LanguageAddSerializer(self.language).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_a_language(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/languages/'
        response = self.client.put(url + str(self.language.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveLanguageLevelTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.language_level = mixer.blend(LanguageLevel)
        self.data = LanguageLevelAddSerializer(self.language_level).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_a_language(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/languagelevels/'
        response = self.client.put(url + str(self.language_level.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreateProfileDisabilityTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability, )
        self.profile_disability = mixer.blend(ProfileDisability, profile_id=self.profile,type_of_disability_id=self.type_of_disability)
        self.data = ProfileDisabilityAddSerializer(self.profile_disability).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_affect_a_type_of_disability_to_a_profile(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.post(url + str(self.profile.id) + '/disabilities/add/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadProfileDisabilityTest(APITestCase):
    """
    Roegistered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability, )
        self.profile_disability = mixer.blend(ProfileDisability, profile_id=self.profile,type_of_disability_id=self.type_of_disability)
        self.data = ProfileDisabilityAddSerializer(self.profile_disability).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_list_of_types_of_disability_of_a_profile(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + '/disabilities/list/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_list_of_types_of_disability_of_a_profile(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + '/disabilities/' + str(self.profile_disability.id) + '/view/?client=' + str(self.apps.client_id),format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateTypeOfDisabilityTest(APITestCase):
    """
    Roegistered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability, )
        self.type_of_disability1 = mixer.blend(TypeOfDisability, )
        self.profile_disability = mixer.blend(ProfileDisability, profile_id=self.profile,
                                             type_of_disability_id=self.type_of_disability)
        self.data = ProfileDisabilityAddSerializer(self.profile_disability).data
        self.data.update({'type_of_disability_id': self.type_of_disability1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_edit_a_type_of_disability(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profile.id) + '/disabilities/' + str(self.profile_disability.id) + '/edit/?client=' + str(self.apps.client_id),self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveTypeOfDisabilityTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability, )
        self.profile_disability = mixer.blend(ProfileDisability, profile_id=self.profile,type_of_disability_id=self.type_of_disability)
        self.data = ProfileDisabilityAddSerializer(self.profile_disability).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_a_type_of_disability(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
        url + str(self.profile.id) + '/disabilities/' + str(self.profile_disability.id) + '/remove/?client=' + str(self.apps.client_id),
            self.data, format='json')
        self.assertEqual(response.status_code, 401)




class NonAuthenticatedUserCreateTypeOfDisabilityTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability,)
        self.data = TypeOfDisabilityAddSerializer(self.type_of_disability).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_a_type_of_disability(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/typesofdisability/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateTypeOfDisabilityTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability, )
        self.data = TypeOfDisabilityAddSerializer(self.type_of_disability).data
        self.data.update({'name': 'New Physical disability'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_edit_a_type_of_disability(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/typesofdisability/'
        response = self.client.put(url + str(self.type_of_disability.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveTypeOfDisabilityTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability,)
        self.data = TypeOfDisabilityAddSerializer(self.type_of_disability).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_a_type_of_disability(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/typesofdisability/'
        response = self.client.put(url + str(self.type_of_disability.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreateProfileIndustryTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.industry = mixer.blend(Industry, )
        self.industryA = mixer.blend(Industry, )
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)
        self.data = CustomIndustryAddSerializer(self.profile).data
        self.data['industry_id'] = [str(self.industry.id)]
        self.data['new_industries'] = [str(self.industryA.name)]

    def test_non_authenticated_user_can_not_affect_an_industry_to_a_profile(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.post(url + str(self.profile1.id) + '/industries/add/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)



class NonAuthenticatedUserAddMultipleEmailTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile_email = mixer.blend(ProfileMail, profile_id=self.profile, created_by=self.profile, password=global_variables.SUPERUSER_PASSWORD,
                                        modified_by=self.profile)
        self.data = ProfileMailAddSerializer(self.profile_email).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_a_occupation(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.post(url + str(self.profile.id) + '/mails/add/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreateProfilePositionTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.position = mixer.blend(Position)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_position = mixer.blend(ProfilePosition, position_id=self.position, company_id=self.company,
                                           profile_id=self.profile, country_id=self.country, city_id=self.city,
                                           state_province_id=self.state_province, start_date='2018-05', end_date='2019-10')
        self.data = CustomPositionAddSerializer(self.profile_position).data
        self.data.update({'start_date': "2016-08"})
        self.data.update({'end_date': "2016-08"})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)


    def test_non_authenticated_user_can_not_affect_a_position_to_a_profile(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.post(url + str(self.profile1.id) + '/positions/add/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)



class NonAuthenticatedUserUpdateProfilePositionTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.position = mixer.blend(Position)
        self.position1 = mixer.blend(Position)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_position = mixer.blend(ProfilePosition, position_id=self.position, company_id=self.company,
                                           profile_id=self.profile, country_id=self.country, city_id=self.city,
                                           state_province_id=self.state_province, start_date='2018-05', end_date='2019-10')
        self.data = ProfilePositionAddSerializer(self.profile_position).data

        self.data.update({'position_id': self.position1.id})
        self.data.update({'start_date': "2016-08"})
        self.data.update({'end_date': "2016-08"})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)


    def test_non_authenticated_user_can_not_Update_profile_position_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + '/positions/' + str(self.profile_position.id) + '/edit/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateProfileEducationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.profile = mixer.blend(Profile, default_language=None)
        self.education_level = mixer.blend(EducationLevel, created_by=self.profile, modified_by=self.profile)
        self.education = mixer.blend(Education, )
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.education1 = mixer.blend(Education, )
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.company = mixer.blend(Company, legal_id=self.legal,  created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_education = mixer.blend(ProfileEducation, education_id=self.education, company_id=self.company,
                                            education_level_id=self.education_level, profile_id=self.profile, start_date='2018-05', end_date='2019-10')
        self.data = ProfileProfileEducationListSerializer(self.profile_education).data

        self.data = CustomEducationAddSerializer(self.profile_education).data
        self.data['company_id'] = str(self.company.id)
        self.data['new_company'] = str(self.company.name)
        self.data['description'] = str(self.profile_education.description)
        self.data['accomplishments_and_awards'] = str(self.profile_education.accomplishments_and_awards)
        self.data['activities_and_societies'] = str(self.profile_education.activities_and_societies)
        self.data['education_id'] = str(self.education.id)
        self.data['new_education'] = str(self.education.name)
        self.data['start_date'] = str(self.profile_education.start_date)
        self.data['end_date'] = str(self.profile_education.end_date)
        self.data['country_id'] = str(self.country.id)
        self.data['state_province_id'] = str(self.state_province.id)
        self.data['city_id'] = str(self.city.id)


        self.data.update({'education_id': self.education1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_update_profile_education_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + '/educations/' + str(self.profile_education.id) + '/edit/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateProfileOccupationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.occupation = mixer.blend(Occupation, )
        self.occupation1 = mixer.blend(Occupation, )
        self.profile_occupation = mixer.blend(ProfileOccupation, occupation_id=self.occupation, profile_id=self.profile,
                                             created_by=self.profile)
        self.data = ProfileOccupationSerializer(self.profile_occupation).data
        self.data.update({'occupation_id': self.occupation1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_Update_profile_occupation_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile1.id) + '/occupations/' + str(self.profile_occupation.id) + '/edit/?client=' + str(self.apps.client_id),
            self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateProfileLanguageTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.language_level = mixer.blend(LanguageLevel)
        self.language = mixer.blend(Language, )
        self.profile_language = mixer.blend(ProfileLanguage, language_id=self.language, profile_id=self.profile,
                                           language_level_id=self.language_level, created_by=self.profile)
        self.data = ProfileLanguageAddSerializer(self.profile_language).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_update_profile_language_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.LANGUAGE + str(self.profile_language.id) + '/edit/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveProfileLanguageTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.language = mixer.blend(Language, )
        self.language1 = mixer.blend(Language, )
        self.profile_language = mixer.blend(ProfileLanguage, is_active=True, language_id=self.language,
                                           profile_id=self.profile, created_by=self.profile)
        self.data = ProfileLanguageAddSerializer(self.profile_language).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_profile_language_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profile_language.profile_id.id) + profilesapp_variables.LANGUAGE + str(
            self.profile_language.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveProfileIndustryTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.industry = mixer.blend(Industry, )
        self.industry1 = mixer.blend(Industry, )
        self.profileIndustry = mixer.blend(ProfileIndustry, is_active=True, industry_id=self.industry, profile_id=self.profile)
        self.data = ProfileIndustryAddSerializer(self.profileIndustry).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_profile_industry_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + '/industries/' + str(self.profileIndustry.id) + '/remove/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveProfileskillTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.skill = mixer.blend(Skill, )
        self.skill1 = mixer.blend(Skill, )
        self.profile_skill = mixer.blend(ProfileSkill, skill_id=self.skill, profile_id=self.profile)
        self.data = ProfileSkillAddSerializer(self.profile_skill).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_profile_skill_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + '/skills/' + str(self.profile_skill.id) + '/remove/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveProfileIndustryTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.industry = mixer.blend(Industry)
        self.industry1 = mixer.blend(Industry,)
        self.profileIndustry = mixer.blend(ProfileIndustry, industry_id=self.industry, profile_id=self.profile, is_active=True)
        self.data = ProfileIndustryAddSerializer(self.profileIndustry).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_profile_industry_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + '/industries/' + str(self.profileIndustry.id) + '/remove/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveProfilePositionTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.position = mixer.blend(Position)
        self.position1 = mixer.blend(Position)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_position = mixer.blend(ProfilePosition, position_id=self.position, company_id=self.company,
                                           profile_id=self.profile, country_id=self.country, city_id=self.city,
                                           state_province_id=self.state_province, start_date='2018-05', end_date='2019-10')
        self.data = ProfilePositionAddSerializer(self.profile_position).data
        self.data.update({'start_date': "2016-08"})
        self.data.update({'end_date': "2016-08"})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)



    def test_non_authenticated_user_can_not_remove_profile_position_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + '/positions/' + str(self.profile_position.id) + '/remove/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveProfileeducationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.education_level = mixer.blend(EducationLevel, )
        self.education = mixer.blend(Education, )
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_education = mixer.blend(ProfileEducation, education_id=self.education, company_id=self.company,
                                            education_level_id=self.education_level, profile_id=self.profile, start_date='2018-05', end_date='2019-10')
        self.data = ProfileProfileEducationListSerializer(self.profile_education).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_profile_education_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + '/educations/' + str(self.profile_education.id) + '/remove/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, 401)

class NonAuthenticatedUserRemoveProfileOccupationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.occupation = mixer.blend(Occupation, )
        self.occupation1 = mixer.blend(Occupation, )
        self.profile_occupation = mixer.blend(ProfileOccupation, is_active=True, occupation_id=self.occupation,
                                             profile_id=self.profile, created_by=self.profile)
        self.data = ProfileOccupationSerializer(self.profile_occupation).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_profile_occupation_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile1.id) + '/occupations/' + str(self.profile_occupation.id) + '/remove/?client=' + str(self.apps.client_id),
            self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveProfileLanguageTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.language_level = mixer.blend(LanguageLevel)
        self.language = mixer.blend(Language, )
        self.profile_language = mixer.blend(ProfileLanguage, language_id=self.language, profile_id=self.profile,
                                           language_level_id=self.language_level, created_by=self.profile)
        self.data = ProfileLanguageAddSerializer(self.profile_language).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_profile_language_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.LANGUAGE + str(self.profile_language.id) + '/remove/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadProfileAreaTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest, )
        self.profile_area = mixer.blend(ProfileArea, profile_area_of_interest_id=self.area, profile_id=self.profile)
        self.data = ProfileAreaSerializer(self.profile_area).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_profile_area_list(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + '/areaofinterests/list/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_profile_area_detail(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.AREA_OF_INTEREST + str(self.profile_area.id) + '/view/?client=' + str(self.apps.client_id),
            format='json')
        self.assertEqual(response.status_code, 401)



class NonAuthenticatedUserUpdateProfileAreaTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest, )
        self.area1 = mixer.blend(ProfileAreaOfInterest, )
        self.profile_area = mixer.blend(ProfileArea, profile_area_of_interest_id=self.area, profile_id=self.profile)
        self.data = ProfileAreaSerializer(self.profile_area).data
        self.data.update({'profile_area_of_interest_id': self.area1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_Update_profile_area_detail(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.AREA_OF_INTEREST + str(self.profile_area.id) + '/edit/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveProfileAreaTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest, )
        self.profile_area = mixer.blend(ProfileArea, profile_area_of_interest_id=self.area, profile_id=self.profile)
        self.data = ProfileAreaSerializer(self.profile_area).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_profile_area_detail(self):
        """
        Fail if Authentication credentials are not provided!
        """

        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + profilesapp_variables.AREA_OF_INTEREST + str(self.profile_area.id) + '/remove/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreateProfileFavoriteCompanyTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_favorite_company = mixer.blend(ProfileFavoriteCompany, company_id=self.company,
                                                  profile_id=self.profile)

        self.data = ProfileFavoriteCompanyAddSerializer(self.profile_favorite_company).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_add_his_favorite_company(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.post(url + str(self.profile.id) + '/favorite-companies/add/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadProfileFavoriteCompanyTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_favorite_company = mixer.blend(ProfileFavoriteCompany, company_id=self.company,
                                                  profile_id=self.profile)
        self.data = ProfileFavoriteCompanyAddSerializer(self.profile_favorite_company).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_his_favorite_company(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + '/favorite-companies/list/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_his_favorite_company(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.FAVORITE_COMPANY + str(self.profile_favorite_company.id) + '/view/?client=' + str(self.apps.client_id),
            format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateProfileFavoriteCompanyTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal,created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.company1 = mixer.blend(Company, legal_id=self.legal, created_by=self.profile,
                                    modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_favorite_company = mixer.blend(ProfileFavoriteCompany, company_id=self.company,
                                                  profile_id=self.profile)

        self.data = ProfileFavoriteCompanyAddSerializer(self.profile_favorite_company).data
        self.data.update({'company_id': self.company1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_edit_his_favorite_company(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.FAVORITE_COMPANY + str(self.profile_favorite_company.id) + '/edit/?client=' + str(self.apps.client_id),
            format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveProfileFavoriteCompanyTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)
        self.company = mixer.blend(Company, legal_id=self.legal,created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_favorite_company = mixer.blend(ProfileFavoriteCompany, company_id=self.company,profile_id=self.profile)
        self.data = ProfileFavoriteCompanyAddSerializer(self.profile_favorite_company).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_his_favorite_company(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + profilesapp_variables.FAVORITE_COMPANY + str(self.profile_favorite_company.id) + '/remove/?client=' + str(self.apps.client_id),format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreateProfileSpontaneousCompanyTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.company_department = mixer.blend(CompanyDepartment, company_id=self.company)
        self.profile_spontaneous_company = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                                     profile_id=self.profile, company_department_id=self.company_department)
        self.data = ProfileSpontaneousCompanyAddSerializer(self.profile_spontaneous_company).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_add_his_spontaneous_company(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.post(url + str(self.profile.id) + '/applications/spontaneous/add/?client=' + str(self.apps.client_id), self.data,
                                    format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadProfileSpontaneousCompanyTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.company_department = mixer.blend(CompanyDepartment, company_id=self.company)
        self.profile_spontaneous_company = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                                     profile_id=self.profile, company_department_id=self.company_department)
        self.data = ProfileSpontaneousCompanyAddSerializer(self.profile_spontaneous_company).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_his_spontaneous_company(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + '/applications/spontaneous/list/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_his_spontaneous_company(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + profilesapp_variables.SPONTANEOUS_APPLICATION + str(
            self.profile_spontaneous_company.id) + '/view/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateProfileSpontaneousCompanyTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.company_department = mixer.blend(CompanyDepartment, company_id=self.company)
        self.company1 = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                    state_province_id=self.state_province, created_by=self.profile,
                                    modified_by=self.profile, logo=None, cover_photo=None, )
        self.company_department_1 = mixer.blend(CompanyDepartment, company_id=self.company1)
        self.profile_spontaneous_company = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                                     profile_id=self.profile, company_department_id=self.company_department)
        self.data = ProfileSpontaneousCompanyAddSerializer(self.profile_spontaneous_company).data
        self.data.update({'company_id': self.company1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_edit_his_spontaneous_company(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + profilesapp_variables.SPONTANEOUS_APPLICATION + str(
            self.profile_spontaneous_company.id) + '/edit/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveProfileSpontaneousCompanyTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)
        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,state_province_id=self.state_province, created_by=self.profile,modified_by=self.profile, logo=None, cover_photo=None, )
        self.company_department = mixer.blend(CompanyDepartment, company_id=self.company)
        self.profile_spontaneous_company = mixer.blend(ProfileSpontaneousCompany, company_department_id=self.company_department,company_id=self.company,profile_id=self.profile)
        self.data = ProfileSpontaneousCompanyAddSerializer(self.profile_spontaneous_company).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_his_spontaneous_company(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + profilesapp_variables.SPONTANEOUS_APPLICATION + str(self.profile_spontaneous_company.id) + '/remove/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreateProfileFavoriteOpportunityTest(APITestCase):
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.opportunity = mixer.blend(Opportunity, company_id=self.company, contact=self.profile, salary_currency=self.salary_currency,
                               job_contract_type_id=self.contract, country_id=self.country, city_id=self.city,
                               state_province_id=self.state_province, created_by=self.profile, modified_by=self.profile)
        self.profile_favorite_opportunity = mixer.blend(ProfileFavoriteOpportunity, opportunity_id=self.opportunity, profile_id=self.profile)
        self.data = ProfileFavoriteOpportunityAddSerializer(self.profile_favorite_opportunity).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_add_his_favorite_company(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.post(url + str(self.profile.id) + '/favorite-opportunities/add/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadProfileFavoriteOpportunityTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.opportunity= mixer.blend(Opportunity, company_id=self.company, contact=self.profile, salary_currency=self.salary_currency,
                               job_contract_type_id=self.contract, country_id=self.country, city_id=self.city,
                               state_province_id=self.state_province, created_by=self.profile, modified_by=self.profile)
        self.profile_favorite_opportunity = mixer.blend(ProfileFavoriteOpportunity, opportunity_id=self.opportunity, profile_id=self.profile)

        self.data = ProfileFavoriteOpportunityAddSerializer(self.profile_favorite_opportunity).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_his_favorite_company(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + '/favorite-opportunities/list/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_his_favorite_company(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.FAVORITE_OPPORTUNITY + str(self.profile_favorite_opportunity.id) + '/view/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateProfileFavoriteOpportunityTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.company1 = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                    state_province_id=self.state_province, created_by=self.profile,
                                    modified_by=self.profile, logo=None, cover_photo=None, )
        self.opportunity= mixer.blend(Opportunity, company_id=self.company, contact=self.profile, salary_currency=self.salary_currency,
                               job_contract_type_id=self.contract, country_id=self.country, city_id=self.city,
                               state_province_id=self.state_province, created_by=self.profile, modified_by=self.profile)
        self.profile_favorite_opportunity = mixer.blend(ProfileFavoriteOpportunity, opportunity_id=self.opportunity, profile_id=self.profile)

        self.data = ProfileFavoriteOpportunityAddSerializer(self.profile_favorite_opportunity).data
        self.data.update({'company_id': self.company1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_edit_his_favorite_company(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.FAVORITE_OPPORTUNITY + str(self.profile_favorite_opportunity.id) + '/edit/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserRemoveProfileFavoriteOpportunityTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """

    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)
        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.opportunity = mixer.blend(Opportunity, company_id=self.company, contact=self.profile, salary_currency=self.salary_currency,
                               job_contract_type_id=self.contract, country_id=self.country, city_id=self.city,
                               state_province_id=self.state_province, created_by=self.profile, modified_by=self.profile)
        self.profile_favorite_opportunity = mixer.blend(ProfileFavoriteOpportunity, opportunity_id=self.opportunity, profile_id=self.profile)

        self.data = ProfileFavoriteOpportunityAddSerializer(self.profile_favorite_opportunity).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_remove_his_favorite_company(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.FAVORITE_OPPORTUNITY + str(self.profile_favorite_opportunity.id) + '/remove/?client=' + str(self.apps.client_id),
            format='json')
        self.assertEqual(response.status_code, 401)



class NonAuthenticatedUserReadProfileConnexionTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profileA = mixer.blend(Profile, default_language=None)
        self.profileB = mixer.blend(Profile, default_language=None)
        self.profileC = mixer.blend(Profile, default_language=None)
        self.profileD = mixer.blend(Profile, default_language=None)
        self.profileE = mixer.blend(Profile, default_language=None)
        self.profileF = mixer.blend(Profile, default_language=None)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileA,invitee_profile_id=self.profileB, blocker_profile_id=self.profile)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileB,invitee_profile_id=self.profileA, blocker_profile_id=self.profile, invitation_status=1)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileC,invitee_profile_id=self.profileD, blocker_profile_id=self.profile, invitation_status=1)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileD,invitee_profile_id=self.profileF, blocker_profile_id=self.profile, invitation_status=1)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileE,invitee_profile_id=self.profileA, blocker_profile_id=self.profile, invitation_status=0)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileF,invitee_profile_id=self.profileE, blocker_profile_id=self.profile, invitation_status=0)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profile,invitee_profile_id=self.profileC, blocker_profile_id=self.profile, invitation_status=0)
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_idA = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileA)
        self.application_client_idB = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileB)
        self.application_client_idC = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileC)
        self.application_client_idD = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileD)
        self.application_client_idE = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileE)
        self.application_client_idF = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileF)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)
        self.data = ProfileConnexionsListSerializer(self.profile_connexion).data

    def test_non_authenticated_user_can_not_read_list_all_connexions(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/connexions/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_his_connexions(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/connexions/'
        response = self.client.get(url + str(self.profileA.id) + '/list/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_his_last_3_connexions(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/connexions/'
        response = self.client.get(url + str(self.profileA.id) + '/list/latest/', format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_his_last_3_pending_connexions(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/connexions/'
        response = self.client.get(url + str(self.profileA.id) + '/list/latest-pending/', format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_his_last_3_groups_connexions(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/connexions/'
        response = self.client.get(url + str(self.profileA.id) + '/groups/latest-pending/', format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_his_friends_connexions(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/friends/'
        response = self.client.get(url + str(self.profileA.id) + '/list/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreateProfileConnexionTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileA = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileB = mixer.blend(Profile, default_language=None, account_status=1)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileA, invitee_profile_id=self.profileB, blocker_profile_id=self.profile)
        self.profile_connexion1 = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileB, invitee_profile_id=self.profileA, blocker_profile_id=self.profile, invitation_status=1)
        self.data = ProfileConnexionsSerializer(self.profile_connexion1).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_idA = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileA)
        self.application_client_idB = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileB)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_invite_another_user(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.post(url + str(self.profile.id) + '/connexions/invite/' + str(self.profileB.id) + '/add/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserReadProfileInvitationsTest(APITestCase):
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileA = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileB = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileC = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileD = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileF = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileE = mixer.blend(Profile, default_language=None, account_status=1)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileA, invitee_profile_id=self.profileB, blocker_profile_id=self.profile)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileB, invitee_profile_id=self.profile, blocker_profile_id=self.profile, invitation_status=1)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileB, invitee_profile_id=self.profileC, blocker_profile_id=self.profile, invitation_status=2)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileB, invitee_profile_id=self.profileD, blocker_profile_id=self.profile, invitation_status=3)
        self.data = ProfileConnexionsSerializer(self.profile_connexion).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_idA = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileA)
        self.application_client_idB = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileB)
        self.application_client_idC = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileC)
        self.application_client_idD = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileD)
        self.application_client_idE = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileE)
        self.application_client_idF = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileF)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_list_all_accepted_invitations(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/connexions/'
        response = self.client.get(url + str(self.profile.id) + '/accept/', format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_list_all_declined_invitations(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/connexions/'
        response = self.client.get(url + str(self.profileC.id) + '/decline/', format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_list_all_removed_invitations(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/connexions/'
        response = self.client.get(url + str(self.profileD.id) + '/remove/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_list_all_removed_invitations(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/connexions/'
        response = self.client.get(url + str(self.profileB.id) + '/pending/', format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_list_all_pending_invitations_through_profiles_and_groups(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/connexions/'
        response = self.client.get(url + str(self.profileB.id) + '/groups/pending/', format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_list_all_pending_invitations_per_invitor(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/connexions/'
        response = self.client.get(url + str(self.profileA.id) + '/invitor-pending/', format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_his_connexions_detail(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profileB.id) + '/connexions/' + str(self.profileA.id) + '/' + str(self.profile_connexion.id) + '/view/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_list_all_posts_of_his_friends(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/posts/'
        response = self.client.get(url + str(self.profile.id) + '/list/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 401)



class NonAuthenticatedUserAcceptProfileConnexionInvitationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileA = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileB = mixer.blend(Profile, default_language=None, account_status=1)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileA,invitee_profile_id=self.profileB, blocker_profile_id=self.profile)
        self.profile_connexion.invitation_status=1
        self.data = ProfileConnexionsSerializer(self.profile_connexion).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_idA = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileA)
        self.application_client_idB = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileB)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_accept_pending_invitation(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profileA.id) + '/connexions/' + str(self.profileB.id) + '/' + str(self.profile_connexion.id) + '/accept/', self.data, format='json')
        self.assertEqual(response.status_code, 401)

class NonAuthenticatedUserDeclineProfileConnexionPendingInvitationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileA = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileB = mixer.blend(Profile, default_language=None, account_status=1)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileA,invitee_profile_id=self.profileB, blocker_profile_id=self.profile, invitation_status=0)
        self.profile_connexion.invitation_status = 2
        self.data = ProfileConnexionsSerializer(self.profile_connexion).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_idA = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileA)
        self.application_client_idB = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileB)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_decline_pending_invitation(self):
        """
        Fail if Authentication credentials are not provided!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profileA.id) + '/connexions/' + str(self.profileB.id) + '/' + str(self.profile_connexion.id) + '/decline/', self.data, format='json')
        self.assertEqual(response.status_code, 401)

class NonAuthenticatedUserBlockProfileConnexionInvitationTest(APITestCase):
    """
    Authentication credentials will be asked !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileA = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileB = mixer.blend(Profile, default_language=None, account_status=1)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileA,invitee_profile_id=self.profileB, blocker_profile_id=self.profile, invitation_status = 1)
        self.profile_connexion.invitation_status = 3
        self.data = ProfileConnexionsSerializer(self.profile_connexion).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_idA = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileA)
        self.application_client_idB = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileB)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_block_an_invitation(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profileA.id) + '/connexions/' + str(self.profileB.id) + '/' + str(self.profile_connexion.id) + '/block/', self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserCreateProfileAdminRoleTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city, state_province_id=self.state_province, default_language=None, logo=None,cover_photo=None)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile)
        self.data = ProfileAdminRoleAddSerializer(self.profile_admin_role).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_create_an_admin_role(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, 401)



class NonAuthenticatedUserReadProfileAdminRoleTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city, state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=0)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=1)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=2)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=3)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=4)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=5)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=6)
        self.data = ProfileAdminRoleAddSerializer(self.profile_admin_role).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_an_admin_role_detail_info(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile_admin_role.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_an_admin_role_list_by_owner_info(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile.id) + '/owner/', self.data, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_an_admin_role_list_by_editor_info(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile.id) + '/editor/', self.data, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_an_admin_role_list_by_analyst_info(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile.id) + '/analyst/', self.data, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_an_admin_role_list_by_moderator_info(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile.id) + '/moderator/', self.data, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_an_admin_role_list_by_admin_info(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile.id) + '/admin/', self.data, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_an_admin_role_list_by_advertiser_info(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile.id) + '/advertiser/', self.data, format='json')
        self.assertEqual(response.status_code, 401)


class NonAuthenticatedUserUpdateProfileAdminRoleTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city, state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile)
        self.data = ProfileAdminRoleAddSerializer(self.profile_admin_role).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_edit_an_admin_role_detail_info(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile_admin_role.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)




class NonAuthenticatedUserReadProfileWutikoContactTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.profile_wutiko_contact= mixer.blend(ProfileWutikoContact)
        self.data = ProfileWutikoContactSerializer(self.profile_wutiko_contact).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_a_profile_wutiko_contact(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/contact/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, 200)


class NonAuthenticatedUserRemoveProfileWutikoContactTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.app_client_id = global_variables.DEFAULT_APP_CLIENT_ID
        self.profile_wutiko_contact = mixer.blend(ProfileWutikoContact)
        self.data = ProfileWutikoContactSerializer(self.profile_wutiko_contact).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_a_profile_wutiko_contact(self):
        """
        Any user can successfully remove wutiko contact!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/contact/'
        response = self.client.delete(url + str(self.profile_wutiko_contact.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)


class NonAuthenticatedUserReadEducationTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.education_level = mixer.blend(EducationLevel, )
        self.education = mixer.blend(Education, )
        self.data = EducationAddSerializer(self.education).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)

    def test_non_authenticated_user_can_not_read_education_detail(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/educations/'
        response = self.client.get(url + str(self.education.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 401)



class NonAuthenticatedUserReadProfileTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()

        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileListSerializer(self.profile, context=serializer_context).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_read_profile_list(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 401)

    def test_non_authenticated_user_can_not_read_list_all_registered_users(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/all/'
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 401)


    def test_non_authenticated_user_can_not_read_list_of_latest_3_connected_users(self):
        """
        Authentication credentials will be asked !
        """

        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/list/latest/'
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 401)


class ReadProfileTest(APITestCase):
    """
    Registered user is logged in and he will have access to view his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)

        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile = mixer.blend(Profile, default_language=None)
        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileListSerializer(self.profile, context=serializer_context).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_profile_list(self):
        """
        Connected user can successfully list all existing active profiles accounts in the db
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_list_all_registered_users(self):
        """
        Connected user can successfully list all existing profiles in the db
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/all/?client=' + str(self.apps.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


    def test_connected_user_can_read_list_of_latest_3_connected_users(self):
        """
        Connected user can successfully the latest 3 connected  profiles
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/list/latest/?client=' + str(self.apps.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data)-1, Profile.objects.all()[:3].count())


class ReadProfileDetailTest(APITestCase):
    """
    Registered user is logged in and he will have access to view his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.language = mixer.blend(Language, created_by=self.superuser, modified_by=self.superuser, name='English', iso_02='en')
        self.profile = mixer.blend(Profile, default_language=self.language)
        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileViewSerializer(self.profile, context=serializer_context).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_authenticated_user_can_read_his_profile_details(self):
        """
        Authentication credentials will be asked !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.slug) + '/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 200)


class CreateProfileAccountTypeTest(APITestCase):
    """
    Registered user is logged in and he will have access to view his account types detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city,state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType,created_by=self.profile, modified_by=self.profile)
        self.data = ProfileAccountTypeAddSerializer(self.profile_account_type).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_add_a_profile_account_type(self):
        """
        Registered user is logged in and he will be able to add account type!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/type/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

class CreateProfileAccountTypePeriodTest(APITestCase):
    """
    Registered user is logged in and he will have access to view his account type periods detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city, state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.profile, modified_by=self.profile)
        self.profile_account_type_period = mixer.blend(ProfileAccountTypePeriod, account_type_id=self.profile_account_type, created_by=self.profile, profile_id=self.profile)
        self.data = ProfileAccountTypePeriodAddSerializer(self.profile_account_type_period).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_add_a_profile_account_type_period(self):
        """
        Registered user is logged in and he will be able to add account type period!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/type/period/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

class UnableToReadProfileAccountTypeWithTokenPeriodTest(APITestCase):
    """
    Registered user is not logged in and he not will have access to view his account type periods detailed info using token!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.token = Token.objects.create(user=self.superuser)
        self.token.save()
        self.token_id = self.token
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.application = mixer.blend(Application)
        self.access_token = mixer.blend(AccessToken, user=self.superuser,  token=self.token, application=self.application, expires='2016-11-28T13:52:43Z')
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.superuser, modified_by=self.superuser)
        self.profile_account_type_period = mixer.blend(ProfileAccountTypePeriod, account_type_id=self.profile_account_type, created_by=self.superuser, profile_id=self.superuser,  end_date='2017-10-28T13:52:43Z')
        self.data = ProfileAccountTypePeriodAddSerializer(self.profile_account_type_period).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_not_read_his_profile_account_type_period_detail_info_through_expired_token(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.token_id) + '/account/type/period/active/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 400)


class RemoveProfileAccountTypePeriodTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove his account type periods detailed info using token!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.token = Token.objects.create(user=self.superuser)
        self.token.save()
        self.token_id = self.token
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.application = mixer.blend(Application)
        self.access_token = mixer.blend(AccessToken, user=self.superuser,  token=self.token, application=self.application, expires='2019-11-28T13:52:43Z')
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.superuser, modified_by=self.superuser)
        self.profile_account_type_period = mixer.blend(ProfileAccountTypePeriod, account_type_id=self.profile_account_type, created_by=self.superuser, profile_id=self.superuser,  end_date='2018-12-28T13:52:43Z')
        self.data = ProfileAccountTypePeriodAddSerializer(self.profile_account_type_period).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_a_profile_account_type_period(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.delete(url + str(self.profile_account_type_period.id) + '/account/type/period/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)



class UpdateProfileAccountTypeTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit his account type periods detailed info using token!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city,state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType,created_by=self.profile, modified_by=self.profile)
        self.data = ProfileAccountTypeAddSerializer(self.profile_account_type).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_edit_a_profile_account_type(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profile_account_type.id) + '/account/type/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

class RemoveProfileAccountTypeTest(APITestCase):
    """
    Registered user is logged in and he will have access to view his account type periods detailed info using token!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city, state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType,created_by=self.profile, modified_by=self.profile)
        self.data = ProfileAccountTypeAddSerializer(self.profile_account_type).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_a_profile_account_type(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.delete(url + str(self.profile_account_type.id) + '/account/type/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)



class CreateIndustryTest(APITestCase):
    """
    Registered user is logged in and he will have access to add industries!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.industry = mixer.blend(Industry, created_by=self.profile, modified_by=self.profile)
        self.data = IndustryAddSerializer(self.industry).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_create_an_industry(self):
        """
        Authenticated user can add new industries in the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/industries/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)


class CreateSkillTest(APITestCase):
    """
    Registered user is logged in and he will have access to add skills!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.skill = mixer.blend(Skill, created_by=self.profile, modified_by=self.profile)
        self.data = SkillAddSerializer(self.skill).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_create_a_skill(self):
        """
        Authenticated user can add new skills in the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/skills/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, 200)


class CreatePositionTest(APITestCase):
    """
    Registered user is logged in and he will have access to add industries!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.position = mixer.blend(Position)
        self.data = PositionAddSerializer(self.position).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_create_a_position(self):
        """
        Authenticated user can add new positions in the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/positions/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)


class CreateEducationTest(APITestCase):
    """
    Registered user is logged in and he will have access to add educations!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.education_level = mixer.blend(EducationLevel, created_by=self.profile, modified_by=self.profile)
        self.education = mixer.blend(Education, created_by=self.profile, modified_by=self.profile)
        self.education.name_en = 'New edu'
        self.data = EducationAddSerializer(self.education).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_create_a_education(self):
        """
        Authenticated user can add new educations in the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/educations/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)


class CreateProfileAreaTest(APITestCase):
    """
    Registered user is logged in and he will have access to add area of interests!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest, )
        self.data = ProfileAreaOfInterestAddSerializer(self.area).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_create_an_area(self):
        """
        Authenticated user can add new ares of interests in the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/areaofinterests/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)


class CreateOccupationTest(APITestCase):
    """
    Registered user is logged in and he will have access to add occupations!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.occupation = mixer.blend(Occupation, name=str(random_string_test), created_by=self.profile, modified_by=self.profile)
        self.data = OccupationAddSerializer(self.occupation).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)
        self.data['name_en'] = str(self.occupation.name) + str(random_string_new_test)


    def test_connected_user_can_create_an_occupation(self):
        """
        Authenticated user can add new occupations in the db!
        """

        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/occupations/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)


class CreateLanguageTest(APITestCase):
    """
    Registered user is logged in and he will have access to add languages!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.language = mixer.blend(Language, )
        self.data = LanguageAddSerializer(self.language).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_create_a_language(self):
        """
        Authenticated user can add new languages in the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/languages/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)


class ReadIndustryTest(APITestCase):
    """
    Registered user is logged in and he will have access to view industries!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.industry = mixer.blend(Industry, created_by=self.profile, modified_by=self.profile)
        self.data = IndustryAddSerializer(self.industry).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_an_industry(self):
        """
        Authenticated user can list industries in the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/industries/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_industry_detail(self):
        """
        Authenticated user can view industry in the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/industries/'
        response = self.client.get(url + str(self.industry.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class ReadOccupationTest(APITestCase):
    """
    Registered user is logged in and he will have access to view occupations!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.occupation = mixer.blend(Occupation, created_by=self.profile, modified_by=self.profile)
        self.data = OccupationAddSerializer(self.occupation).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_create_a_occupation(self):
        """
        Authenticated user can list occupations in the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/occupations/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_occupation_detail(self):
        """
        Authenticated user can view occupation in the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/occupations/'
        response = self.client.get(url + str(self.occupation.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateIndustryTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit industries!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.industry = mixer.blend(Industry, created_by=self.profile, modified_by=self.profile)
        self.data = IndustryAddSerializer(self.industry).data
        self.data.update({'name_en': 'Managment'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_edit_an_industry(self):
        """
        Authenticated user can edit industries in the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/industries/'
        response = self.client.put(url + str(self.industry.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class ReadSkillTest(APITestCase):
    """
    Registered user is logged in and he will have access to view skills!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.skill = mixer.blend(Skill, created_by=self.profile, modified_by=self.profile)
        self.data = SkillAddSerializer(self.skill).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_a_skill(self):
        """
        Authenticated user can list skills in the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/skills/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_skill_detail(self):
        """
        Authenticated user can view skills in the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/skills/'
        response = self.client.get(url + str(self.skill.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class ReadTypeOfDisabilityTest(APITestCase):
    """
    Registered user is logged in and he will have access to view types of disabilities!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability, created_by=self.profile, modified_by=self.profile)
        self.data = TypeOfDisabilityAddSerializer(self.type_of_disability).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_a_type_of_disability(self):
        """
        Authenticated user can list types of disabilities from the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/typesofdisability/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_type_of_disability_detail(self):
        """
        Authenticated user can read  types of disabilities from the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/typesofdisability/'
        response = self.client.get(url + str(self.type_of_disability.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateSkillTest(APITestCase):
    """
    Registered user is logged in and he will have access to update skills!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.skill = mixer.blend(Skill, created_by=self.profile, modified_by=self.profile)
        self.data = SkillAddSerializer(self.skill).data
        self.data.update({'name_en': 'Django'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_edit_a_skill(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/skills/'
        response = self.client.put(url + str(self.skill.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class ReadPositionTest(APITestCase):
    """
    Registered user is logged in and he will have access to view positions!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.position = mixer.blend(Position)
        self.data = PositionAddSerializer(self.position).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_a_position(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/positions/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_position_detail(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/positions/'
        response = self.client.get(url + str(self.position.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdatePositionTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit positions!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.position = mixer.blend(Position)
        self.data = PositionAddSerializer(self.position).data
        self.data.update({'title_en': 'Manager'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_edit_a_position(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/positions/'
        response = self.client.put(url + str(self.position.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class ReadLanguageTest(APITestCase):
    """
    Registered user is logged in and he will have access to view language!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.language = mixer.blend(Language, created_by=self.profile, modified_by=self.profile)
        self.data = LanguageAddSerializer(self.language).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_create_a_language(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/languages/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_language_detail(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/languages/'
        response = self.client.get(url + str(self.language.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class ReadEducationTest(APITestCase):
    """
    Registered user is logged in and he will have access to view educations!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.education_level = mixer.blend(EducationLevel, created_by=self.profile, modified_by=self.profile)
        self.education = mixer.blend(Education, created_by=self.profile, modified_by=self.profile)
        self.data = EducationAddSerializer(self.education).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_list_all_educations(self):
        """
        Authenticated user can list  all educations from the db!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/educations/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_education_detail(self):
        """
        Authenticated user can view education details !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/educations/'
        response = self.client.get(url + str(self.education.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class ReadAreaTest(APITestCase):
    """
    Registered user is logged in and he will have access to view areas of interests!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest, )
        self.data = ProfileAreaOfInterestAddSerializer(self.area).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_list_all_areas_of_interests(self):

        """
        Authenticated user can list areas of interests !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/areaofinterests/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_area_detail(self):
        """
        Authenticated user can edit an area of interest!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/areaofinterests/'
        response = self.client.get(url + str(self.area.id) + '/view/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateEducationTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit educations!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.education_level = mixer.blend(EducationLevel, )
        self.education = mixer.blend(Education, )
        self.data = EducationAddSerializer(self.education).data
        self.data.update({'name': 'UCAD'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_edit_an_education(self):
        """
        Authenticated user can edit education !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/educations/'
        response = self.client.put(url + str(self.education.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateAreaTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit areas of intetests!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest,)
        self.data = ProfileAreaOfInterestAddSerializer(self.area).data
        self.data.update({'name_en': 'Computer Security'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_edit_an_area(self):
        """
        Authenticated user can edit area of interest !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/areaofinterests/'
        response = self.client.put(url + str(self.area.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateOccupationTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit occupations!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.occupation = mixer.blend(Occupation, created_by=self.profile, modified_by=self.profile)
        self.data = OccupationAddSerializer(self.occupation).data
        self.data.update({'name_en': 'Programming'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_create_a_occupation(self):
        """
        Authenticated user can create occupation !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/occupations/'
        response = self.client.put(url + str(self.occupation.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateLanguageTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit language!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.language = mixer.blend(Language, created_by=self.profile, modified_by=self.profile)
        self.data = LanguageEditSerializer(self.language).data
        self.data.update({'name_en': 'Spanish'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_edit_a_language(self):
        """
        Authenticated user can edit language !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/languages/'
        response = self.client.put(url + str(self.language.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveIndustryTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove industries!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.industry = mixer.blend(Industry, created_by=self.profile, modified_by=self.profile)
        self.data = IndustryAddSerializer(self.industry).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_an_industry(self):
        """
        Authenticated user can remove industry !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/industries/'
        response = self.client.put(url + str(self.industry.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveSkillTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove skills!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.skill = mixer.blend(Skill, created_by=self.profile, modified_by=self.profile)
        self.data = SkillAddSerializer(self.skill).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_a_skill(self):
        """
        Authenticated user can remove skill !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/skills/'
        response = self.client.put(url + str(self.skill.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemovePositionTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove positions!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.position = mixer.blend(Position)
        self.data = PositionAddSerializer(self.position).data
        self.data.update({'title_en': 'Manager'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_a_position(self):
        """
        Authenticated user can remove position !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/positions/'
        response = self.client.put(url + str(self.position.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveEducationTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove educations!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.education_level = mixer.blend(EducationLevel, created_by=self.profile, modified_by=self.profile)
        self.education = mixer.blend(Education, created_by=self.profile, modified_by=self.profile)
        self.data = EducationAddSerializer(self.education).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_an_education(self):
        """
        Authenticated user can remove education !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/educations/'
        response = self.client.put(url + str(self.education.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveAreaTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove areas of interests!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest,)
        self.data = ProfileAreaOfInterestAddSerializer(self.area).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_an_area(self):
        """
        Authenticated user can remove area of interest !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/areaofinterests/'
        response = self.client.put(url + str(self.area.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveOccupationTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove occupations!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.occupation = mixer.blend(Occupation, )
        self.data = OccupationAddSerializer(self.occupation).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_create_a_occupation(self):
        """
        Authenticated user can remove occupation !
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/occupations/'
        response = self.client.put(url + str(self.occupation.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveLanguageTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove language!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.language = mixer.blend(Language, created_by=self.profile, modified_by=self.profile)
        self.data = LanguageAddSerializer(self.language).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_a_language(self):
        """
        Registered user is logged in and he will be able to remove language!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/languages/'
        response = self.client.put(url + str(self.language.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveLanguageLevelTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove langauge levels!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.language_level = mixer.blend(LanguageLevel)
        self.data = LanguageLevelAddSerializer(self.language_level).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_a_language_level(self):
        """
        Registered user is logged in and he will be able to remove language level!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/languagelevels/'
        response = self.client.put(url + str(self.language_level.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class CreateProfileDisabilityTest(APITestCase):
    """
    Registered user is logged in and he will have access to add disabilities to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability, )
        self.profile_disability = mixer.blend(ProfileDisability, profile_id=self.profile,type_of_disability_id=self.type_of_disability)
        self.data = ProfileDisabilityAddSerializer(self.profile_disability).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_affect_a_type_of_disability_to_a_profile(self):
        """
        Registered user is logged in and he will be able to add type of disability to his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.post(url + str(self.profile.id) + '/disabilities/add/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class ReadProfileDisabilityTest(APITestCase):
    """
    Registered user is logged in and he will have access to view disabilities to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability, )
        self.profile_disability = mixer.blend(ProfileDisability, profile_id=self.profile,type_of_disability_id=self.type_of_disability)
        self.data = ProfileDisabilityAddSerializer(self.profile_disability).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_list_of_types_of_disability_of_a_profile(self):
        """
        Registered user is logged in and he will be able to list type of disability from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + '/disabilities/list/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_any_types_of_disability_of_a_profile(self):
        """
        Registered user is logged in and he will be able to read any type of disability from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + '/disabilities/' + str(self.profile_disability.id) + '/view/?client=' + str(self.apps.client_id),format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateTypeOfDisabilityTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit disabilities to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability, )
        self.type_of_disability1 = mixer.blend(TypeOfDisability, )
        self.profile_disability = mixer.blend(ProfileDisability, profile_id=self.profile,
                                             type_of_disability_id=self.type_of_disability)
        self.data = ProfileDisabilityAddSerializer(self.profile_disability).data
        self.data.update({'type_of_disability_id': self.type_of_disability1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_edit_a_type_of_disability(self):
        """
        Registered user is logged in and he will be able to edit type of disability from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profile.id) + '/disabilities/' + str(self.profile_disability.id) + '/edit/?client=' + str(self.apps.client_id),self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveTypeOfDisabilityTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove disabilities to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability, )
        self.profile_disability = mixer.blend(ProfileDisability, profile_id=self.profile,type_of_disability_id=self.type_of_disability)
        self.data = ProfileDisabilityAddSerializer(self.profile_disability).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_a_type_of_disability(self):
        """
        Registered user is logged in and he will be able to remove type of disability from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
        url + str(self.profile.id) + '/disabilities/' + str(self.profile_disability.id) + '/remove/?client=' + str(self.apps.client_id),
            self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class ReadAreaTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove skills!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest, )
        self.data = ProfileAreaOfInterestAddSerializer(self.area).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_an_area(self):
        """
        Registered user is logged in and he will be able to list all his areas of interest from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/areaofinterests/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

    def test_connected_user_can_read_area_detail(self):
        """
        Registered user is logged in and he will be able to read an area of interest from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/areaofinterests/'
        response = self.client.get(url + str(self.area.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class CreateTypeOfDisabilityTest(APITestCase):
    """
    Registered user is logged in and he will have access to add disabilities !
    """

    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability, )
        self.data = TypeOfDisabilityAddSerializer(self.type_of_disability).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_create_a_type_of_disability(self):
        """
        Registered user is logged in and he will be able to create an a type of disability from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/typesofdisability/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateTypeOfDisabilityTest(APITestCase):
    """
    Registered user is logged in and he will have access to add disabilities
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.type_of_disability = mixer.blend(TypeOfDisability, )
        self.data = TypeOfDisabilityAddSerializer(self.type_of_disability).data
        self.data.update({'name': 'New Physical disability'})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_edit_a_type_of_disability(self):
        """
        Registered user is logged in and he will be able to edit an type of disability from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/typesofdisability/'
        response = self.client.put(url + str(self.type_of_disability.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

class UpdateProfileLanguageTest(APITestCase):
    """
    Registered user is logged in and he will have access to add disabilities to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.language_level = mixer.blend(LanguageLevel)
        self.language = mixer.blend(Language, )
        self.language1 = mixer.blend(Language, )
        self.profile_language = mixer.blend(ProfileLanguage, language_id=self.language, profile_id=self.profile,
                                           language_level_id=self.language_level, created_by=self.profile)
        self.data = ProfileLanguageAddSerializer(self.profile_language).data
        self.data.update({'language_id': self.language1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_update_profile_language_detail(self):
        """
        Registered user is logged in and he will be able to edit an language from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profile_language.profile_id.id) + profilesapp_variables.LANGUAGE + str(
            self.profile_language.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)



class UpdateProfileEducationTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit educations to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.education_level = mixer.blend(EducationLevel, )
        self.education = mixer.blend(Education, )
        self.education1 = mixer.blend(Education, )
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.superuser, modified_by=self.superuser)
        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.superuser,
                                   modified_by=self.superuser, logo=None, cover_photo=None, )
        self.profile_education = mixer.blend(ProfileEducation, education_id=self.education, company_id=self.company,
                                            education_level_id=self.education_level, profile_id=self.superuser, start_date='2018-05', end_date='2019-10')
        self.data = CustomEducationEditSerializer(self.profile_education).data
        self.data['company_id'] = str(self.company.id)
        self.data['new_company'] = str(" ")
        self.data['description'] = str(self.profile_education.description)
        self.data['accomplishments_and_awards'] = str(self.profile_education.accomplishments_and_awards)
        self.data['activities_and_societies'] = str(self.profile_education.activities_and_societies)
        self.data['education_id'] = str(self.education.id)
        self.data['education_level_id'] = str(self.education_level.id)
        self.data['new_education'] = str(" ")
        self.data['start_date'] = str(self.profile_education.start_date)
        self.data['end_date'] = str(self.profile_education.end_date)
        self.data['country_id'] = str(self.country.id)
        self.data['state_province_id'] = str(self.state_province.id)
        self.data['city_id'] = str(self.city.id)
        self.data.update({'education_id': self.education1.id})

        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_update_profile_education_detail(self):
        """
        Registered user is logged in and he will be able to edit an education from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.superuser.id) + '/educations/' + str(self.profile_education.id) + '/edit/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateProfileOccupationTest(APITestCase):
    """
    Registered user is logged in and he will have access to add occupations to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.occupation = mixer.blend(Occupation, )
        self.occupation1 = mixer.blend(Occupation, )
        self.profile_occupation = mixer.blend(ProfileOccupation, occupation_id=self.occupation, profile_id=self.profile,
                                             created_by=self.profile)
        self.data = ProfileOccupationSerializer(self.profile_occupation).data
        self.data.update({'occupation_id': self.occupation1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_update_profile_occupation_detail(self):
        """
        Registered user is logged in and he will be able to edit an occupation from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile1.id) + '/occupations/' + str(self.profile_occupation.id) + '/edit/?client=' + str(self.apps.client_id),
            self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateProfileLanguageTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit languages to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.language_level = mixer.blend(LanguageLevel)
        self.language = mixer.blend(Language, )
        self.profile_language = mixer.blend(ProfileLanguage, language_id=self.language, profile_id=self.profile,
                                           language_level_id=self.language_level, created_by=self.profile)
        self.data = ProfileLanguageAddSerializer(self.profile_language).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_update_profile_language_detail(self):
        """
        Registered user is logged in and he will be able to edit an language from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.LANGUAGE + str(self.profile_language.id) + '/edit/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveProfileLanguageTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove languages to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.language = mixer.blend(Language, )
        self.language1 = mixer.blend(Language, )
        self.profile_language = mixer.blend(ProfileLanguage, is_active=True, language_id=self.language,
                                           profile_id=self.profile, created_by=self.profile)
        self.data = ProfileLanguageAddSerializer(self.profile_language).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_profile_language_detail(self):
        """
        Registered user is logged in and he will be able to remove an language from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profile_language.profile_id.id) + profilesapp_variables.LANGUAGE + str(
            self.profile_language.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveProfileIndustryTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove industry to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.industry = mixer.blend(Industry, )
        self.industry1 = mixer.blend(Industry, )
        self.profileIndustry = mixer.blend(ProfileIndustry, is_active=True, industry_id=self.industry, profile_id=self.profile)
        self.data = ProfileIndustryAddSerializer(self.profileIndustry).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_profile_industry_detail(self):
        """
        Registered user is logged in and he will be able to remove an industry from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + '/industries/' + str(self.profileIndustry.id) + '/remove/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveProfileSkillTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove skills to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.skill = mixer.blend(Skill, )
        self.skill1 = mixer.blend(Skill, )
        self.profile_skill = mixer.blend(ProfileSkill, skill_id=self.skill, profile_id=self.profile)
        self.data = ProfileSkillAddSerializer(self.profile_skill).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_profile_skill_detail(self):
        """
        Registered user is logged in and he will be able to remove skills from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + '/skills/' + str(self.profile_skill.id) + '/remove/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveProfileIndustryTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove industries to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.industry = mixer.blend(Industry,)
        self.industry1 = mixer.blend(Industry, )
        self.profileIndustry = mixer.blend(ProfileIndustry, industry_id=self.industry, profile_id=self.profile, is_active=True)
        self.data = ProfileIndustryAddSerializer(self.profileIndustry).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_profile_industry_detail(self):
        """
        Registered user is logged in and he will be able to remove an industry from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + '/industries/' + str(self.profileIndustry.id) + '/remove/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveProfilePositionTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit positions to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.position = mixer.blend(Position)
        self.position1 = mixer.blend(Position)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_position = mixer.blend(ProfilePosition, position_id=self.position, company_id=self.company,
                                           profile_id=self.profile, country_id=self.country, city_id=self.city,
                                           state_province_id=self.state_province, start_date='2018-05', end_date='2019-10')
        self.data = ProfilePositionAddSerializer(self.profile_position).data
        self.data.update({'start_date': "2016-08"})
        self.data.update({'end_date': "2016-08"})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)


    def test_connected_user_can_remove_profile_position_detail(self):
        """
        Registered user is logged in and he will be able to remove a position from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + '/positions/' + str(self.profile_position.id) + '/remove/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class CreateProfileEducationTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove educations to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME, password=global_variables.SUPERUSER_PASSWORD,)
        self.education_level = mixer.blend(EducationLevel, )
        self.education = mixer.blend(Education, )
        self.education1 = mixer.blend(Education, )
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.superuser, modified_by=self.superuser)
        self.company = mixer.blend(Company, legal_id=self.legal,  created_by=self.superuser,
                                   modified_by=self.superuser, logo=None, cover_photo=None, )
        self.profile_education = mixer.blend(ProfileEducation, education_id=self.education, company_id=self.company,
                                            education_level_id=self.education_level, profile_id=self.superuser, start_date='2018-05', end_date='2019-10')
        self.data = CustomEducationAddSerializer(self.profile_education).data
        self.data['company_id'] = str(self.company.id)
        self.data['new_company'] = str(" ")
        self.data['description'] = str(self.profile_education.description)
        self.data['accomplishments_and_awards'] = str(self.profile_education.accomplishments_and_awards)
        self.data['activities_and_societies'] = str(self.profile_education.activities_and_societies)
        self.data['education_id'] = str(self.education1.id)
        self.data['education_level_id'] = str(self.education_level.id)
        self.data['new_education'] = str(" ")
        self.data['start_date'] = str(self.profile_education.start_date)
        self.data['end_date'] = str(self.profile_education.end_date)
        self.data['country_id'] = str(self.country.id)
        self.data['state_province_id'] = str(self.state_province.id)
        self.data['city_id'] = str(self.city.id)

        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_add_an_education_to_his_profile(self):
        """
        Registered user is logged in and he will be able to remove an education from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.post(
            url + str(self.superuser.id) + '/educations/' + 'add/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveProfileEducationTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove educations to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None)
        self.education_level = mixer.blend(EducationLevel, )
        self.education = mixer.blend(Education, )
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.company = mixer.blend(Company, legal_id=self.legal,  created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_education = mixer.blend(ProfileEducation, education_id=self.education, company_id=self.company,
                                            education_level_id=self.education_level, profile_id=self.profile, start_date='2018-05', end_date='2019-10')
        self.data = ProfileProfileEducationListSerializer(self.profile_education).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_profile_education_detail(self):
        """
        Registered user is logged in and he will be able to remove an education from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + '/educations/' + str(self.profile_education.id) + '/remove/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveProfileOccupationTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove occupations to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.profile1 = mixer.blend(Profile, default_language=None)
        self.occupation = mixer.blend(Occupation, )
        self.occupation1 = mixer.blend(Occupation, )
        self.profile_occupation = mixer.blend(ProfileOccupation, is_active=True, occupation_id=self.occupation,
                                             profile_id=self.profile, created_by=self.profile)
        self.data = ProfileOccupationSerializer(self.profile_occupation).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_2 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile1)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_profile_occupation_detail(self):
        """
        Registered user is logged in and he will be able to remove an occupation from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile1.id) + '/occupations/' + str(self.profile_occupation.id) + '/remove/?client=' + str(self.apps.client_id),
            self.data, format='json')


class ReadProfileAreaTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove occupations to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest, )
        self.profile_area = mixer.blend(ProfileArea, profile_area_of_interest_id=self.area, profile_id=self.profile)
        self.data = ProfileAreaSerializer(self.profile_area).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_profile_area_list(self):
        """
        Registered user is logged in and he will be able to list an area from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + '/areaofinterests/list/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_profile_area_detail(self):
        """
        Registered user is logged in and he will be able to view an area from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.AREA_OF_INTEREST + str(self.profile_area.id) + '/view/?client=' + str(self.apps.client_id),
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)



class UpdateProfileAreaTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit area of interests to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest, )
        self.area1 = mixer.blend(ProfileAreaOfInterest, )
        self.profile_area = mixer.blend(ProfileArea, profile_area_of_interest_id=self.area, profile_id=self.profile)
        self.data = ProfileAreaSerializer(self.profile_area).data
        self.data.update({'profile_area_of_interest_id': self.area1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_update_profile_area_detail(self):
        """
        Registered user is logged in and he will be able to remove an area from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.AREA_OF_INTEREST + str(self.profile_area.id) + '/edit/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveProfileAreaTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove area of interests to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, default_language=None)
        self.area = mixer.blend(ProfileAreaOfInterest, )
        self.profile_area = mixer.blend(ProfileArea, profile_area_of_interest_id=self.area, profile_id=self.profile)
        self.data = ProfileAreaSerializer(self.profile_area).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_profile_area_detail(self):
        """
        Registered user is logged in and he will be able to remove an area from his profile!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(
            url + str(self.profile.id) + profilesapp_variables.AREA_OF_INTEREST + str(self.profile_area.id) + '/remove/?client=' + str(self.apps.client_id), self.data,
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class CreateProfileFavoriteCompanyTest(APITestCase):
    """
    Registered user is logged in and he will have access to add company as favorite to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_favorite_company = mixer.blend(ProfileFavoriteCompany, company_id=self.company,
                                                  profile_id=self.profile)

        self.data = ProfileFavoriteCompanyAddSerializer(self.profile_favorite_company).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)
        self.company_client_id = mixer.blend(CompanyApplicationClient, client_id=self.apps, company_id=self.company)

    def test_connected_user_can_add_his_favorite_company(self):
        """
        Registered user is logged in and he will be able to add his favorite company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.post(url + str(self.profile.id) + '/favorite-companies/add/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class ReadProfileFavoriteCompanyTest(APITestCase):
    """
    Registered user is logged in and he will have access to view company as favorite to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_favorite_company = mixer.blend(ProfileFavoriteCompany, company_id=self.company,
                                                  profile_id=self.profile)

        self.data = ProfileFavoriteCompanyAddSerializer(self.profile_favorite_company).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_his_favorite_company(self):
        """
        Registered user is logged in and he will be able to list his favorite company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + '/favorite-companies/list/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_his_favorite_company(self):
        """
        Registered user is logged in and he will be able to read his favorite company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.FAVORITE_COMPANY + str(self.profile_favorite_company.id) + '/view/?client=' + str(self.apps.client_id),
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateProfileFavoriteCompanyTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit company as favorite to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.company1 = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                    state_province_id=self.state_province, created_by=self.profile,
                                    modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_favorite_company = mixer.blend(ProfileFavoriteCompany, company_id=self.company,
                                                  profile_id=self.profile)

        self.data = ProfileFavoriteCompanyAddSerializer(self.profile_favorite_company).data
        self.data.update({'company_id': self.company1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_edit_his_favorite_company(self):
        """
        Registered user is logged in and he will be able to edit his favorite company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.FAVORITE_COMPANY + str(self.profile_favorite_company.id) + '/edit/?client=' + str(self.apps.client_id),
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveProfileFavoriteCompanyTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove company as favorite to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,state_province_id=self.state_province, created_by=self.profile,modified_by=self.profile, logo=None, cover_photo=None, )
        self.profile_favorite_company = mixer.blend(ProfileFavoriteCompany, company_id=self.company,profile_id=self.profile)
        self.data = ProfileFavoriteCompanyAddSerializer(self.profile_favorite_company).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_his_favorite_company(self):
        """
        Registered user is logged in and he will be able to remove his favorite company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + profilesapp_variables.FAVORITE_COMPANY + str(self.profile_favorite_company.id) + '/remove/?client=' + str(self.apps.client_id),format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class CreateProfileSpontaneousCompanyTest(APITestCase):
    """
    Registered user is logged in and he will have access to submit company  spontaneous application  to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.company_department = mixer.blend(CompanyDepartment, company_id=self.company)
        self.profile_spontaneous_company = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                                     profile_id=self.profile, company_department_id=self.company_department)

        self.data = ProfileSpontaneousCompanyAddSerializer(self.profile_spontaneous_company).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)
        self.company_client_id = mixer.blend(CompanyApplicationClient, client_id=self.apps, company_id=self.company)

    def test_connected_user_can_add_his_spontaneous_company(self):
        """
        Registered user is logged in and he will be able to send  his spontaneous applications  to the  company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.post(url + str(self.profile.id) + '/applications/spontaneous/add/?client=' + str(self.apps.client_id), self.data,
                                    format='json')
        self.assertEqual(response.status_code, 200)


class ReadProfileSpontaneousCompanyTest(APITestCase):
    """
    Registered user is logged in and he will have access to view company  spontaneous application  to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.company_department = mixer.blend(CompanyDepartment, company_id=self.company)
        self.profile_spontaneous_company = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                                     profile_id=self.profile, company_department_id=self.company_department)

        self.data = ProfileSpontaneousCompanyAddSerializer(self.profile_spontaneous_company).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_his_spontaneous_company(self):
        """
        Registered user is logged in and he will be able to list  his spontaneous applications  to the  company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + '/applications/spontaneous/list/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_his_spontaneous_company(self):
        """
        Registered user is logged in and he will be able to read  his spontaneous applications  to the  company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + profilesapp_variables.SPONTANEOUS_APPLICATION + str(
            self.profile_spontaneous_company.id) + '/view/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateProfileSpontaneousCompanyTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit company  spontaneous application  to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)
        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.company1 = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                    state_province_id=self.state_province, created_by=self.profile,
                                    modified_by=self.profile, logo=None, cover_photo=None, )
        self.company_department = mixer.blend(CompanyDepartment, company_id=self.company)
        self.company_department_1 = mixer.blend(CompanyDepartment, company_id=self.company1)
        self.profile_spontaneous_company = mixer.blend(ProfileSpontaneousCompany, company_department_id=self.company_department,company_id=self.company,profile_id=self.profile)
        self.data = ProfileSpontaneousCompanyAddSerializer(self.profile_spontaneous_company).data
        self.data.update({'company_id': self.company1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_edit_his_spontaneous_company(self):
        """
        Registered user is logged in and he will be able to edit his spontaneous applications  to the  company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + profilesapp_variables.SPONTANEOUS_APPLICATION + str(
            self.profile_spontaneous_company.id) + '/edit/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveProfileSpontaneousCompanyTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove company  spontaneous application  to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)
        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,state_province_id=self.state_province, created_by=self.profile,modified_by=self.profile, logo=None, cover_photo=None, )
        self.company_department = mixer.blend(CompanyDepartment, company_id=self.company)
        self.profile_spontaneous_company = mixer.blend(ProfileSpontaneousCompany, company_department_id=self.company_department,company_id=self.company,profile_id=self.profile)
        self.data = ProfileSpontaneousCompanyAddSerializer(self.profile_spontaneous_company).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_his_spontaneous_company(self):
        """
        Registered user is logged in and he will be able to send  his spontaneous applications  to the  company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + profilesapp_variables.SPONTANEOUS_APPLICATION + str(self.profile_spontaneous_company.id) + '/remove/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class CreateProfileFavoriteOpportunityTest(APITestCase):
    """
    Registered user is logged in and he will have access to add an opportunity as favorite to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.opportunity= mixer.blend(Opportunity, company_id=self.company, contact=self.profile, salary_currency=self.salary_currency,
                               job_contract_type_id=self.contract, country_id=self.country, city_id=self.city,
                               state_province_id=self.state_province, created_by=self.profile, modified_by=self.profile)
        self.profile_favorite_opportunity = mixer.blend(ProfileFavoriteOpportunity, opportunity_id=self.opportunity, profile_id=self.profile)

        self.data = ProfileFavoriteOpportunityAddSerializer(self.profile_favorite_opportunity).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)
        self.opportunity_client_id = mixer.blend(OpportunityApplicationClient, client_id=self.apps, opportunity_id=self.opportunity)

    def test_connected_user_can_add_his_favorite_company(self):
        """
        Registered user is logged in and he will be able to ad his favorite company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.post(url + str(self.profile.id) + '/favorite-opportunities/add/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class ReadProfileFavoriteOpportunityTest(APITestCase):
    """
    Registered user is logged in and he will have access to view an opportunity as favorite to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.opportunity= mixer.blend(Opportunity, company_id=self.company, contact=self.profile, salary_currency=self.salary_currency,
                               job_contract_type_id=self.contract, country_id=self.country, city_id=self.city,
                               state_province_id=self.state_province, created_by=self.profile, modified_by=self.profile)
        self.profile_favorite_opportunity = mixer.blend(ProfileFavoriteOpportunity, opportunity_id=self.opportunity, profile_id=self.profile)

        self.data = ProfileFavoriteOpportunityAddSerializer(self.profile_favorite_opportunity).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_his_favorite_company(self):
        """
        Registered user is logged in and he will be able to list his favorite companies!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.profile.id) + '/favorite-opportunities/list/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_his_favorite_company(self):
        """
        Registered user is logged in and he will be able to read his favorite company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.FAVORITE_OPPORTUNITY + str(self.profile_favorite_opportunity.id) + '/view/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateProfileFavoriteOpportunityTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit an opportunity as favorite to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)

        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.company1 = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                    state_province_id=self.state_province, created_by=self.profile,
                                    modified_by=self.profile, logo=None, cover_photo=None, )
        self.opportunity= mixer.blend(Opportunity, company_id=self.company, contact=self.profile, salary_currency=self.salary_currency,
                               job_contract_type_id=self.contract, country_id=self.country, city_id=self.city,
                               state_province_id=self.state_province, created_by=self.profile, modified_by=self.profile)
        self.profile_favorite_opportunity = mixer.blend(ProfileFavoriteOpportunity, opportunity_id=self.opportunity, profile_id=self.profile)

        self.data = ProfileFavoriteOpportunityAddSerializer(self.profile_favorite_opportunity).data
        self.data.update({'company_id': self.company1.id})
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_edit_his_favorite_company(self):
        """
        Registered user is logged in and he will be able to edit his favorite company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.FAVORITE_OPPORTUNITY + str(self.profile_favorite_opportunity.id) + '/edit/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveProfileFavoriteOpportunityTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove an opportunity as favorite to his profile
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.profile, modified_by=self.profile)
        self.contract = mixer.blend(JobContractType, created_by=self.profile, modified_by=self.profile)
        self.company = mixer.blend(Company, legal_id=self.legal, country_id=self.country, city_id=self.city,
                                   state_province_id=self.state_province, created_by=self.profile,
                                   modified_by=self.profile, logo=None, cover_photo=None, )
        self.opportunity= mixer.blend(Opportunity, company_id=self.company, contact=self.profile, salary_currency=self.salary_currency,
                               job_contract_type_id=self.contract, country_id=self.country, city_id=self.city,
                               state_province_id=self.state_province, created_by=self.profile, modified_by=self.profile)
        self.profile_favorite_opportunity = mixer.blend(ProfileFavoriteOpportunity, opportunity_id=self.opportunity, profile_id=self.profile)

        self.data = ProfileFavoriteOpportunityAddSerializer(self.profile_favorite_opportunity).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_his_favorite_company(self):
        """
        Registered user is logged in and he will be able to remove his favorite company!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(
            url + str(self.profile.id) + profilesapp_variables.FAVORITE_OPPORTUNITY + str(self.profile_favorite_opportunity.id) + '/remove/?client=' + str(self.apps.client_id),
            format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class DeclineProfileConnexionPendingInvitationTest(APITestCase):
    """
    Registered user is logged in and he will have access to decline new invitaions!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileA = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileB = mixer.blend(Profile, default_language=None, account_status=1)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileA,invitee_profile_id=self.profileB, blocker_profile_id=self.profile, invitation_status=0)
        self.profile_connexion.invitation_status = 2
        self.data = ProfileConnexionsSerializer(self.profile_connexion).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_idA = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileA)
        self.application_client_idB = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileB)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_decline_pending_invitation(self):
        """
        Registered user is logged in and he will be able to decline new connexions invitations!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profileA.id) + '/connexions/' + str(self.profileB.id) + '/' + str(self.profile_connexion.id) + '/decline/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

class BlockProfileConnexionInvitationTest(APITestCase):
    """
    Registered user is logged in and he will have access to block new invitations!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.salary_currency = mixer.blend(Currency)
        self.profile = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileA = mixer.blend(Profile, default_language=None, account_status=1)
        self.profileB = mixer.blend(Profile, default_language=None, account_status=1)
        self.profile_connexion = mixer.blend(ProfileConnexion, invitor_profile_id=self.profileA,invitee_profile_id=self.profileB, blocker_profile_id=self.profile, invitation_status = 1)
        self.profile_connexion.invitation_status = 3
        self.data = ProfileConnexionsSerializer(self.profile_connexion).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_idA = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileA)
        self.application_client_idB = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profileB)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_block_an_invitation(self):
        """
        Registered user is logged in and he will be able to block new connexions invitations!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profileA.id) + '/connexions/' + str(self.profileB.id) + '/' + str(self.profile_connexion.id) + '/block/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class CreateProfileAdminRoleTest(APITestCase):
    """
    Registered user is logged in and he will have access to add profile admin roles!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city, state_province_id=self.state_province, default_language=None, logo=None,cover_photo=None)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile)
        self.data = ProfileAdminRoleAddSerializer(self.profile_admin_role).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_create_an_admin_role(self):
        """
        Registered user is logged in and he will be able to add users as admin!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)



class ReadProfileAdminRoleTest(APITestCase):
    """
    Registered user is logged in and he will have access to read profile admin roles!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city, state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=0)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=1)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=2)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=3)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=4)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=5)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile, admin_roles=6)
        self.data = ProfileAdminRoleAddSerializer(self.profile_admin_role).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_an_admin_role_detail_info(self):
        """
        Registered user is logged in and he will be able to view any objects detail he runs as an admin!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile_admin_role.id) + '/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_an_admin_role_list_by_owner_info(self):
        """
        Registered user is logged in and he will be able to list all objects he runs as the owner!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile.id) + '/owner/', self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_an_admin_role_list_by_editor_info(self):
        """
        Registered user is logged in and he will be able to list all objects he runs as a editor!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile.id) + '/editor/', self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_an_admin_role_list_by_analyst_info(self):
        """
        Registered user is logged in and he will be able to list all objects he runs as analyst!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile.id) + '/analyst/', self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_an_admin_role_list_by_moderator_info(self):
        """
        Registered user is logged in and he will be able to list all objects he runs as a moderator!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile.id) + '/moderator/', self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_an_admin_role_list_by_admin_info(self):
        """
        Registered user is logged in and he will be able to list all objects he runs as an admin!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile.id) + '/admin/', self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_read_an_admin_role_list_by_advertiser_info(self):
        """
        Registered user is logged in and he will be able to view an admin role!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile.id) + '/advertiser/', self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class UpdateProfileAdminRoleTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit profile admin roles!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city, state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, created_by=self.profile, modified_by=self.profile, profile_id=self.profile)
        self.data = ProfileAdminRoleAddSerializer(self.profile_admin_role).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_edit_an_admin_role_detail_info(self):
        """
        Registered user is logged in and he will be able to edit an admin role!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/adminroles/'
        response = self.client.get(url + str(self.profile_admin_role.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class ProfileLoginTest(APITestCase):
    """
    A new user is registered and then is logged !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.client.logout()
        self.data = ProfileLoginSerializer(self.superuser).data

    def test_connected_new_user_can_login(self):
        """
        Authenticated user can successfully logged in!
        """
        self.assertEqual(self.superuser.email, self.data['email'])
        self.assertTrue(self.superuser.is_active)
        self.assertEqual(self.superuser.account_status, 1)
        self.assertEqual(self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,), True)


class UnableReadProfileSettingsTest(APITestCase):
    """
    Registered user is logged in and he will not be able to view  his  profile settings within an  expired token!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.token = Token.objects.create(user=self.superuser)
        self.token.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.application = mixer.blend(Application)
        self.access_token = mixer.blend(AccessToken, user=self.superuser,  token=self.token, application=self.application, expires='2015-11-28T13:52:43Z')
        self.profile = mixer.blend(Profile, default_language=None)
        self.data = ProfileSettingsSerializer(self.profile).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)


    def test_connected_user_can_not_read_profile_settings_info_though_expired_token(self):
        """
        Authenticated user can not view his settings within an expired token!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/'
        response = self.client.get(url + str(self.token) + '/view/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, 400)


class UpdateProfileTest(APITestCase):
    """
    Registered user is logged in and he will have access to edit his  profile detailed info!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME, password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, account_status=1, default_language=None, photo=None, cover_photo=None)
        self.profile_mail = mixer.blend(ProfileMail, email='su@wutiko.com', profile_id=self.profile, created_by=self.profile, modified_by=self.profile, is_active=True, is_default=True)
        self.profile.first_name = global_variables.SUPERUSER_NAME
        self.profile.last_name = global_variables.SUPERUSER_NAME
        self.profile.photo = None
        self.profile.cover_photo = None
        self.language_level = mixer.blend(LanguageLevel)
        self.language = mixer.blend(Language, )
        self.currency = mixer.blend(Currency)
        self.data = Profile1Serializer(self.profile).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_deactivate_profile(self):
        """
        Connected user can successfully deactivate his  profile
        """
        data = self.data.update({'account_status': 2})
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/'
        response = self.client.put(url + str(self.profile.id) + '/deactivate/?client=' + str(self.apps.client_id), data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_connected_user_can_edit_profile(self):
        """
        Connected user can successfully edit his  profile
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.put(url + str(self.profile.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 200)

    # def test_connected_user_can_edit_profile_settings_info_though_id(self):
    #     """
    #     Connected user can successfully edit his  profile settings (like his current country, language etc)
    #     """
    #     url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/settings/'
    #     self.data['email'] = 'su@wutiko.com'
    #     self.data['phone'] = '777922780'
    #     self.data['default_currency'] = self.currency.id
    #     self.data['default_country'] = self.country.name
    #     self.data['default_language'] = self.language.id
    #     response = self.client.put(url + str(self.profile.id) + '/edit/?client=' + str(self.apps.client_id), self.data, format='json')
    #     print(response.data)
    #     self.assertEqual(response.status_code, status.HTTP_200_OK)

class ActivatingProfileTest(APITestCase):
    """
    Registered user is logged in and he will have access to active his  profile detail info!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city, account_status=2, state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.data = Profile1Serializer(self.profile).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_reactivate_profile(self):
        """
        Connected user can successfully reactivate his  profile
        """
        data = self.data.update({'account_status': 3})
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/'
        response = self.client.put(url + str(self.profile.id) + '/reactivate/?client=' + str(self.apps.client_id), data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class RemoveProfileTest(APITestCase):
    """
    Registered user is logged in and he will have access to remove his profile info!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city,state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.data = Profile1Serializer(self.profile).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_remove_profile(self):
        """
        Connected user can successfully remove his  profile
        """
        self.data = self.data.update({'account_status': 4})
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/'
        response = self.client.put(url + str(self.profile.id) + '/remove/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

class CreateProfileAccountTypeTest(APITestCase):
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city,state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType,created_by=self.profile, modified_by=self.profile)
        self.data = ProfileAccountTypeAddSerializer(self.profile_account_type).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_add_a_profile_account_type(self):
        """
        Connected user can successfully add account type his  profile
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/type/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

class CreateProfileAccountTypePeriodTest(APITestCase):
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city, state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.profile, modified_by=self.profile)
        self.profile_account_type_period = mixer.blend(ProfileAccountTypePeriod, account_type_id=self.profile_account_type, created_by=self.profile, profile_id=self.profile)
        self.data = ProfileAccountTypePeriodAddSerializer(self.profile_account_type_period).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)


    def test_connected_user_can_add_a_profile_account_type_period(self):
        """
        Connected user can successfully add  an account type period
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/type/period/add/?client=' + str(self.apps.client_id)
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

class ReadProfileAccountTypeTest(APITestCase):
    """
    Registered user is logged in and he will have access to view his  profile account types!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city,state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.profile, modified_by=self.profile)
        self.data = ProfileAccountTypeAddSerializer(self.profile_account_type).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_a_profile_account_type(self):
        """
        Connected user can successfully view his  profile account type
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/type/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

class ReadProfileAccountTypePeriodTest(APITestCase):
    """
    Registered user is logged in and he will have access to view his  profile account type periods!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.profile = mixer.blend(Profile, country_id=self.country, city_id=self.city, state_province_id=self.state_province, default_language=None, photo=None,cover_photo=None)
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.profile, modified_by=self.profile)
        self.profile_account_type_period = mixer.blend(ProfileAccountTypePeriod, account_type_id=self.profile_account_type, created_by=self.profile, profile_id=self.profile)
        self.data = ProfileAccountTypePeriodAddSerializer(self.profile_account_type_period).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_a_profile_account_type_period(self):
        """
        Connected user can successfully view his  profile account type period
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/type/period/list/?client=' + str(self.apps.client_id)
        response = self.client.get(url, self.data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)



class UnableToReadProfileAccountTypeWithTokenPeriodTest(APITestCase):
    """
    Registered user is  logged in and he will have access to view his  profile account type period within an expired token!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.token = Token.objects.create(user=self.superuser)
        self.token.save()
        self.token_id = self.token
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.application = mixer.blend(Application)
        self.access_token = mixer.blend(AccessToken, user=self.superuser,  token=self.token, application=self.application, expires='2016-11-28T13:52:43Z')
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.superuser, modified_by=self.superuser)
        self.profile_account_type_period = mixer.blend(ProfileAccountTypePeriod, account_type_id=self.profile_account_type, created_by=self.superuser, profile_id=self.superuser,  end_date='2017-10-28T13:52:43Z')
        self.data = ProfileAccountTypePeriodAddSerializer(self.profile_account_type_period).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_not_read_his_profile_account_type_period_detail_info_through_expired_token(self):
        """
        Connected user can successfully view his  profile account type period using invalid token
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE
        response = self.client.get(url + str(self.token_id) + '/account/type/period/active/view/?client=' + str(self.apps.client_id), self.data, format='json')
        self.assertEqual(response.status_code, 400)



class NonAuthenticatedUserCreateProfileWutikoContactTest(APITestCase):
    """
    Registered user is not logged in and he will not have access to activate his profiles detailed info !
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.profile_wutiko_contact = mixer.blend(ProfileWutikoContact)
        self.data = ProfileWutikoContactSerializer(self.profile_wutiko_contact).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.html_info = mixer.blend(ApplicationHtmlInfo, client_id=self.apps, created_by=self.superuser, modified_by=self.superuser, application_domain=self.apps.name, application_name=self.apps.name)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)
        self.app_client_id = str(self.apps.client_id)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_non_authenticated_user_can_not_add_a_profile_wutiko_contact(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/contact/add/?client=' + str(self.apps.client_id)
        self.data['name'] = 'su@wutiko.com'
        self.data['email'] = 'su@wutiko.com'
        self.data['phone'] = '777922780'
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(response.status_code, 400)

class NonAuthenticatedUserProfileRegisterWithExitingInactiveAccountTest(APITestCase):
    """
    Registered user should be associated with an application (app_client_id)!
    and the test successes for exiting inactive account! The user should be sent a link for
    resetting his password!
    """
    def setUp(self):
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.profile_user = Profile.objects.create(first_name=global_variables.SUPERUSER_NAME, last_name=global_variables.SUPERUSER_NAME, email=random_string_test() + global_variables.SUPERUSER_USERNAME, password=global_variables.SUPERUSER_PASSWORD,)
        self.html_info = mixer.blend(ApplicationHtmlInfo, client_id=self.apps, created_by=self.profile_user, modified_by=self.profile_user, application_domain=self.apps.name, application_name=self.apps.name)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile_user)
        self.app_client_id = str(self.apps.client_id)
        self.profile_user.app_client_id = str(self.app_client_id)
        self.profile_user.is_active = False
        self.profile_user.account_status = 0
        self.profile_user1 = Profile.objects.create(first_name=global_variables.SUPERUSER_NAME, last_name=global_variables.SUPERUSER_NAME, email=random_string_test() + global_variables.SUPERUSER_USERNAME, password=global_variables.SUPERUSER_PASSWORD,)
        self.profile_user1.app_client_id = str(self.app_client_id)
        factory = APIRequestFactory()
        request = factory.get('/')
        serializer_context = {'request': Request(request)}
        self.data = ProfileRegisterSerializer(self.profile_user1, context=serializer_context).data

    def test_non_authenticated_user_can_register_with_existing_inactive_email(self):
        """
        With an existing email in the provided user info, the expected result is a successful message!
        """
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/register/?client=' + str(self.apps.client_id)
        self.data['email'] = random_string_test() + "@hotmail.com"
        response = self.client.post(url, self.data, format='json')
        self.assertEqual(self.profile_user.first_name, self.data['first_name'])
        self.assertEqual(self.profile_user.last_name, self.data['last_name'])
        self.assertFalse(self.profile_user.is_active)
        self.assertFalse(self.profile_user.is_active)
        self.assertEqual(response.status_code, 200)


class ReadProfileAccountTypeWithTokenPeriodTest(APITestCase):
    """
    Registered user is logged in and he will have access to view his account type periods detailed info using token!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.token = Token.objects.create(user=self.superuser)
        self.token.save()
        self.token_id = self.token
        self.client.login(username=global_variables.SUPERUSER_USERNAME, password=global_variables.SUPERUSER_PASSWORD,)
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.access_token = mixer.blend(AccessToken, user=self.superuser,  token=self.token, application=self.apps, expires='2019-12-28T13:52:43Z')
        self.profile_account_type = mixer.blend(ProfileAccountType, created_by=self.superuser, modified_by=self.superuser)
        self.profile_account_type_period = mixer.blend(ProfileAccountTypePeriod, account_type_id=self.profile_account_type, created_by=self.superuser, profile_id=self.superuser,  end_date='2040-12-28T13:52:43Z')
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)
        self.html_info = mixer.blend(ApplicationHtmlInfo, client_id=self.apps, created_by=self.superuser, modified_by=self.superuser, application_domain=self.apps.name, application_name=self.apps.name)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)
        self.app_client_id = str(self.apps.client_id)
        self.data = ProfileAccountTypePeriodAddSerializer(self.profile_account_type_period).data

    def test_connected_user_can_read_his_profile_account_type_period_detail_info_through_token(self):
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + profilesapp_variables.PROFILE

        response = self.client.get(url + str(self.access_token.token) + '/account/type/period/active/view/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class ReadProfileSettingsTest(APITestCase):
    """
    Registered user is logged in and he will have access to view his  profile settings!
    """
    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD,)
        self.superuser.save()
        self.token = Token.objects.create(user=self.superuser)
        self.token.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME, password=global_variables.SUPERUSER_PASSWORD,)
        self.country = mixer.blend(Country)
        self.language_level = mixer.blend(LanguageLevel)
        self.language = mixer.blend(Language, )
        self.currency = mixer.blend(Currency)
        self.state_province = mixer.blend(StateProvince, country_id=self.country)
        self.city = mixer.blend(City, state_province_id=self.state_province)
        self.application = mixer.blend(Application)
        self.access_token = mixer.blend(AccessToken, user=self.superuser,  token=self.token, application=self.application, expires='2054-11-28T13:52:43Z')
        self.profile = mixer.blend(Profile, default_language=self.language, default_country=self.country, default_currency=self.currency)
        self.data = ProfileDefaultsSettingsSerializer(self.profile).data
        self.apps = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.profile)
        self.application_client_id_1 = mixer.blend(ProfileApplicationClient, client_id=self.apps, profile_id=self.superuser)

    def test_connected_user_can_read_profile_settings_info_though_token(self):
        """
        Authenticated user can view his settings within an valid token!
        """

        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/account/'
        response = self.client.get(url + str(self.token) + '/view/?client=' + str(self.apps.client_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class AdminUserSpontaneousApplicationDashboardTest(APITestCase):
    """
    Test handling training opportunity publication!
    Only the with a business status should be able to create aa opportunity
    So we start checking if the connected user IS PRO!
    """

    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD, is_active=True, account_status=1)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None, is_active=True, account_status=1)
        self.salary_currency = mixer.blend(Currency)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.superuser, modified_by=self.superuser)
        self.contract = mixer.blend(JobContractType, created_by=self.superuser, modified_by=self.superuser)
        self.company = mixer.blend(Company, legal_id=self.legal, created_by=self.superuser, modified_by=self.superuser,
                                   logo=None, cover_photo=None, )
        self.company_department = mixer.blend(CompanyDepartment, company_id=self.company)
        self.spontaneous_applicant = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, table_id=str(self.company.id), table_type=1,
                                              admin_roles=1, profile_id=self.superuser, created_by=self.superuser,
                                              modified_by=self.superuser)
        # self.opportunity_application = mixer.blend(OpportunityProfile, profile_id=self.profile,
        #                                            opportunity_id=self.opportunity, is_selected=True)
        self.application = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(CompanyApplicationClient, client_id=self.application, company_id=self.company)
        self.application_client_id_profile = mixer.blend(ProfileApplicationClient, client_id=self.application, profile_id=self.profile)
        self.application_html_information = mixer.blend(ApplicationHtmlInfo, client_id=self.application)
        self.application_client_id_profile_1 = mixer.blend(ProfileApplicationClient, client_id=self.application, profile_id=self.superuser)

    # def test_list_selected_application_by_a_admin(self):
    #     """
    #     We are listing here all the selected applications by an admin. The test should return a code 200
    #     """
    #     url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/opportunities/' + str(self.superuser.id) + '/applications/selected/list/?client=' + str(self.application.client_id)
    #     response = self.client.get(url, format='json')
    #     self.assertEqual(response.status_code, 200)


    def test_list_confirmed_application_interviews_by_a_admin(self):
        """
        We are listing here all the comfirmed applications interviews by an admin. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department, sent_interview=True, accepted_interview=True)
                                       # profile_id=self.profile, company_department_id=self.company_department, sent_interview=True, accepted_interview=True)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/' + str(spontaneous_applicant_1.id) + '/interviews/send/?client=' + str(self.application.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 200)    


    def test_list_pending_application_interviews_by_a_admin(self):
        """
        We are listing here all the pending applications interviews by an admin. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department, sent_interview=True)
                                       # profile_id=self.profile, sent_interview=True, company_department_id=self.company_department)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/' + str(self.profile.id) + '/applications/spontaneous/interviews/pending/list/?client=' + str(self.application.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 200)


    def test_send_interviews_interview_by_a_admin(self):
        """
        We allow here an admin to send interview invitations to applicants. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/' + str(spontaneous_applicant_1.id) + '/interviews/send/?client=' + str(self.application.client_id)
        data = SpontaneousApplicationSendInterviewSerializer(spontaneous_applicant_1).data
        response = self.client.put(url, data=data,format='json')
        self.assertEqual(response.status_code, 200)

    def test_grade_initial_add__by_an_admin(self):
        """
        We allow here an admin to grade initially an applicants. The test should return a code 200
        """

        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/' + str(spontaneous_applicant_1.id) + '/initial/grading/add/?client=' + str(self.application.client_id)
        data = {'grade_initial':3, 'comment_initial':'Test'}
        # data = ProfileSpontaneousCompanyGradeFinalSerializer(grade).data
        response = self.client.post(url, data=data,format='json')
        self.assertEqual(response.status_code, 200)


    def test_grade_initial_list_true_by_an_admin(self):
        """
        We allow here an admin to grade initially an applicants. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/' + str(spontaneous_applicant_1.id) + '/initial/grading/add/?client=' + str(self.application.client_id)
        data = {'grade_initial':3, 'comment_initial':'Test'}
        response_1 = self.client.post(url, data=data,format='json')
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/applications/spontaneous/initial/grading/true/profile/list/?client=' + str(self.application.client_id) + '&company=' + str(self.company.id)
        response = self.client.get(url,format='json')
        self.assertEqual(response.status_code, 200)


    def test_grade_initial_list_false_by_an_admin(self):
        """
        We allow here an admin to grade initially an applicants. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        # url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/' + str(spontaneous_applicant_1.id) + '/initial/grading/add/?client=' + str(self.application.client_id)
        # data = {'grade_initial':3, 'comment_initial':'Test'}
        # # data = ProfileSpontaneousCompanyGradeFinalSerializer(grade).data
        # response_1 = self.client.post(url, data=data,format='json')
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/applications/spontaneous/initial/grading/false/profile/list/?client=' + str(self.application.client_id) + '&company=' + str(self.company.id)
        # url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/' + str(self.company.id) + '/applications/spontaneous/initial/grading/false/profile/list/?client=' + str(self.application.client_id)
        response = self.client.get(url,format='json')
        self.assertEqual(response.status_code, 200)


    def test_grade_initial_list_true_by_all_admins(self):
        """
        We allow here an admin to grade initially an applicants. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/' + str(spontaneous_applicant_1.id) + '/initial/grading/add/?client=' + str(self.application.client_id)
        data = {'grade_initial':3, 'comment_initial':'Test'}
        # data = ProfileSpontaneousCompanyGradeFinalSerializer(grade).data
        response_1 = self.client.post(url, data=data,format='json')
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/applications/spontaneous/initial/grading/true/list/?client=' + str(self.application.client_id) + '&company=' + str(self.company.id)
        # url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/' + str(self.company.id) + '/applications/spontaneous/initial/grading/true/list/?client=' + str(self.application.client_id)
        response = self.client.get(url,format='json')
        self.assertEqual(response.status_code, 200)



    def test_grade_initial_list_false_by_all_admins(self):
        """
        We allow here an admin to grade initially an applicants. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/applications/spontaneous/initial/grading/false/list/?client=' + str(self.application.client_id) + '&company=' + str(self.company.id)
        # url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/' + str(self.company.id) + '/applications/spontaneous/initial/grading/false/list/?client=' + str(self.application.client_id)
        response = self.client.get(url,format='json')
        self.assertEqual(response.status_code, 200)


    def test_grade_final_add__by_an_admin(self):
        """
        We allow here an admin to grade finally an applicants. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/' + str(spontaneous_applicant_1.id) + '/final/grading/add/?client=' + str(self.application.client_id)
        data = {'grade_final':3, 'comment_final':'Test'}
        # data = ProfileSpontaneousCompanyGradeFinalSerializer(grade).data
        response = self.client.post(url, data=data,format='json')
        self.assertEqual(response.status_code, 200)

    def test_grade_final_list_true_by_an_admin(self):
        """
        We allow here an admin to list final graded applicants. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/' + str(spontaneous_applicant_1.id) + '/final/grading/add/?client=' + str(self.application.client_id)
        data = {'grade_final':3, 'comment_final':'Test'}
        response_1 = self.client.post(url, data=data,format='json')
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/applications/spontaneous/final/grading/true/profile/list/?client=' + str(self.application.client_id) + '&company=' + str(self.company.id)
        # url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/' + str(self.company.id) + '/applications/spontaneous/final/grading/true/profile/list/?client=' + str(self.application.client_id)
        response = self.client.get(url,format='json')
        self.assertEqual(response.status_code, 200)


    def test_grade_final_list_false_by_an_admin(self):
        """
        We allow here an admin to list final graded applicants. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/applications/spontaneous/final/grading/true/profile/list/?client=' + str(self.application.client_id) + '&company=' + str(self.company.id)
        # url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/' + str(self.company.id) + '/applications/spontaneous/final/grading/true/profile/list/?client=' + str(self.application.client_id)
        response = self.client.get(url,format='json')
        self.assertEqual(response.status_code, 200)


    def test_grade_final_list_true_by_all_admins(self):
        """
        We allow here an admin to list final graded applicants. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/' + str(spontaneous_applicant_1.id) + '/final/grading/add/?client=' + str(self.application.client_id)
        data = {'grade_final':3, 'comment_final':'Test'}
        response_1 = self.client.post(url, data=data,format='json')
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/applications/spontaneous/final/grading/true/list/?client=' + str(self.application.client_id) + '&company=' + str(self.company.id)
        # url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/' + str(self.company.id) + '/applications/spontaneous/final/grading/true/list/?client=' + str(self.application.client_id)
        response = self.client.get(url,format='json')
        self.assertEqual(response.status_code, 200)


    def test_grade_final_list_false_by_all_admins(self):
        """
        We allow here an admin to list final graded applicants. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/applications/spontaneous/final/grading/false/list/?client=' + str(self.application.client_id) + '&company=' + str(self.company.id)
        # url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/companies/' + str(self.company.id) + '/applications/spontaneous/final/grading/false/list/?client=' + str(self.application.client_id)
        response = self.client.get(url,format='json')
        self.assertEqual(response.status_code, 200)



    def test_select_application_by_an_admin(self):
        """
        We allow here an admin to select applicants. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/' + str(spontaneous_applicant_1.id) + '/selection/add/?client=' + str(self.application.client_id)
        data = SpontaneousApplicationAcceptApplicantProfileSerializer(spontaneous_applicant_1).data
        response = self.client.put(url, data=data,format='json')
        self.assertEqual(response.status_code, 200)

    def test_reject_application_by_an_admin(self):
        """
        We allow here an admin to reject applicants. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/' + str(spontaneous_applicant_1.id) + '/rejection/add/?client=' + str(self.application.client_id)
        data = SpontaneousApplicationRejectSerializer(spontaneous_applicant_1).data
        response = self.client.put(url, data=data,format='json')
        self.assertEqual(response.status_code, 200)


class UserOpportunityDashboardTest(APITestCase):
    """
    Test handling training opportunity publication!
    Only the with a business status should be able to create aa opportunity
    So we start checking if the connected user IS PRO!
    """

    def setUp(self):
        self.superuser = Profile.objects.create_superuser(global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_NAME, global_variables.SUPERUSER_USERNAME,global_variables.SUPERUSER_PASSWORD, is_active=True, account_status=1)
        self.superuser.save()
        self.client.login(username=global_variables.SUPERUSER_USERNAME,password=global_variables.SUPERUSER_PASSWORD,)
        self.profile = mixer.blend(Profile, default_language=None, is_active=True, account_status=1)
        self.salary_currency = mixer.blend(Currency)
        self.legal = mixer.blend(CompanyLegalForm, created_by=self.superuser, modified_by=self.superuser)
        self.contract = mixer.blend(JobContractType, created_by=self.superuser, modified_by=self.superuser)
        self.company = mixer.blend(Company, legal_id=self.legal, created_by=self.superuser, modified_by=self.superuser,
                                   logo=None, cover_photo=None, )
        self.company_department = mixer.blend(CompanyDepartment, company_id=self.company)
        self.spontaneous_applicant = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.superuser, company_department_id=self.company_department)
        self.profile_admin_role = mixer.blend(ProfileAdminRole, table_id=str(self.company.id), table_type=1,
                                              admin_roles=1, profile_id=self.profile, created_by=self.superuser,
                                              modified_by=self.superuser)
        # self.opportunity_application = mixer.blend(OpportunityProfile, profile_id=self.profile,
        #                                            opportunity_id=self.opportunity, is_selected=True)
        self.application = mixer.blend(Application, client_id=global_variables.DEFAULT_APP_CLIENT_ID, redirect_uris=global_variables.UNIT_TEST_HOST)
        self.application_client_id = mixer.blend(CompanyApplicationClient, client_id=self.application, company_id=self.company)
        self.application_client_id_profile = mixer.blend(ProfileApplicationClient, client_id=self.application, profile_id=self.profile)
        self.application_html_information = mixer.blend(ApplicationHtmlInfo, client_id=self.application)
        self.application_client_id_profile_1 = mixer.blend(ProfileApplicationClient, client_id=self.application, profile_id=self.superuser)


    def test_list_interviews_invitation_for_a_user(self):
        """
        We allow here a user to list his interview invitations. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department, sent_interview=True)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/answered/list/?client=' + str(self.application.client_id)
        response = self.client.get(url,format='json')
        self.assertEqual(response.status_code, 200)


    def test_list_interviews_confirmed_for_a_user(self):
        """
        We allow here a user to list his confirmed interviews. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department, sent_interview=True, accepted_interview=True)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/interviews/list/?client=' + str(self.application.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 200)


    def test_list_interviews_archive_for_a_user(self):
        """
        We allow here a user to list his archived interviews. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.profile, company_department_id=self.company_department, is_selected=True)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.profile.id) + '/applications/spontaneous/archived/list/?client=' + str(self.application.client_id)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, 200)


    def test_accept_interview_by_an_user(self):
        """
        We allow here a user to accept interviews. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.superuser, company_department_id=self.company_department, sent_interview=True)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.superuser.id) + '/applications/spontaneous/' + str(spontaneous_applicant_1.id) + '/interviews/accept/?client=' + str(self.application.client_id)
        data = SpontaneousApplicationAcceptInterviewSerializer(spontaneous_applicant_1).data
        response = self.client.put(url, data=data,format='json')
        self.assertEqual(response.status_code, 200)

    def test_reject_interview_by_an_user(self):
        """
        We allow here a user to reject interviews. The test should return a code 200
        """
        spontaneous_applicant_1 = mixer.blend(ProfileSpontaneousCompany, company_id=self.company,
                                       profile_id=self.superuser, company_department_id=self.company_department, sent_interview=True)
        url = global_variables.WUTIKO_DEV_DOMAIN_NAME_UNIT_TEST + '/profiles/'+ str(self.superuser.id) + '/applications/spontaneous/' + str(spontaneous_applicant_1.id) + '/interviews/reject/?client=' + str(self.application.client_id)
        data = SpontaneousApplicationRejectInterviewSerializer(spontaneous_applicant_1).data
        response = self.client.put(url, data=data,format='json')
        self.assertEqual(response.status_code, 200)