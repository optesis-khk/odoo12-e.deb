import React from 'react';
import { connect } from 'react-redux';
import {FormId_Contact , CLIENT_ID} from '../config.js'

import logo_spinner from '../assets/img/loading.GIF';
import Form from "react-jsonschema-form";
// import { render } from "react-dom";
import { createFormEntrie} from '../actions/user';
import {Field, reduxForm } from 'redux-form';
import {GET_FORM, SUBMIT_FORM,CREATE_FORM_ENTRIE} from '../actions/user';

var PROPERTIES={};
var REQUIRED=[];
var UISCHEMA={}
var schema={
  "title": "A registration form",
  "description": "A simple form example.",
  "type": "object",
  "required": [
    "firstName",
    "lastName"
  ],
  "properties": {
    "firstName": {
      "type": "string",
      "title": "First name"
    },
    "lastName": {
      "type": "string",
      "title": "Last name"
    },
    "age": {
      "type": "integer",
      "title": "Age"
    },
    "bio": {
      "type": "string",
      "title": "Bio"
    },
    "password": {
      "type": "string",
      "title": "Password",
      "minLength": 3
    },
    "telephone": {
      "type": "string",
      "title": "Telephone",
      "minLength": 10
    },
    "email": {
      "type": "string",
      "format": "email"
    },
    "fichier": {
      "type": "string",
      "format": "data-url",
      "title": "Single file"
    },
  }
};
var uiSchema={
    "firstName": {
      "ui:autofocus": true,
      "ui:emptyValue": ""
    },
    "age": {
      "ui:widget": "updown",
      "ui:title": "Age of person",
      "ui:description": "(earthian year)"
    },
    "bio": {
      "ui:widget": "textarea"
    },
    "password": {
      "ui:widget": "password",
      "ui:help": "Hint: Make it strong!"
    },
    "date": {
      "ui:widget": "alt-datetime"
    },
    "telephone": {
      "ui:options": {
        "inputType": "tel"
      }
    }
  };
  var formData= {
  };
  function InitialFields()
  {
   var FIELDS={
        'Single line text':{widget:'', type:'string'},
        'Multi line text':{widget:'textarea', type:'string'},
        'Email':{widget:'email', type:'email'},
        'Date':{widget:'alt-date', type:'string'},
        'File upload':{widget:'file', type:'file'},
        'Radio buttons':{widget:'radio', type:'boolean'},
        'Drop down':{widget:'checkboxes', type:'select'},
        'Check boxes':{widget:'checkboxes', type:'checkboxes'},
        'Check boxe':{widget:'checkboxes', type:'checkboxes'},
        'Number':{widget:'updown', type:'number'},
        'Page break':{widget:'', type:'array'},
        'URL':{widget:'', type:'string'},
        'Hidden':{widget:'hidden', type:'string'},
   };
   return FIELDS;
  }
class DynamicFormView extends React.Component{

  constructor(props) {
    super(props);
    this.state={
      email_to:'',
      status:false,
      spinner_status:false,
      modal: false,
      PROPERTIES:{},
      UISCHEMA:{},
      REQUIRED:[],
      show:false,
      initialize_state:true,
      additional_required_fields:[],
      desabledFiels:[],
      is_hidden:["a6c4dede-d7b1-4ce2-86b9-f5a07fd44e60"]
    }
    this.transformForm=this.transformForm.bind(this);
    this.Submission=this.Submission.bind(this);
    this.handleFormChanges=this.handleFormChanges.bind(this);
    this.isHidden=this.isHidden.bind(this);
    this.renderForm=this.renderForm.bind(this)
  }
  isHidden(Id){
   console.log(Id,this.state.is_hidden.filter(obj=>obj===Id).length!==0)
   return this.state.is_hidden.filter(obj=>obj===Id).length!==0
  }
  renderForm(){
    if(this.props.fields){
      this.props.fields.map((field)=>{
        if(field){
          return(
            this.transformForm(field)
          )
        }
      });
      this.setState({REQUIRED:REQUIRED,PROPERTIES:PROPERTIES,UISCHEMA:UISCHEMA,desabledFiels:[]});
      REQUIRED=[];
      PROPERTIES={};
      UISCHEMA={};
    } 
  }
  handleFormChanges(data){
    var concerve_data=data.formData;
    if(data.formData["c42af15a-93cd-4460-9049-3396e832fc8d"]==="Autre"){
      concerve_data["a6c4dede-d7b1-4ce2-86b9-f5a07fd44e60"]=undefined;
      formData=concerve_data;
      this.setState({is_hidden:[]});
      this.renderForm()
    }else{
      if(!this.isHidden("a6c4dede-d7b1-4ce2-86b9-f5a07fd44e60")){
        concerve_data["a6c4dede-d7b1-4ce2-86b9-f5a07fd44e60"]=undefined;
        formData=concerve_data;
        this.setState({is_hidden:["a6c4dede-d7b1-4ce2-86b9-f5a07fd44e60"]});
        this.renderForm()
      }
    }

  }
  Submission(formData){
    var virtual_state={
      email_to:'',
      status:false,
    }
    const data=formData.formData;
    var fields=[];
    this.props.fields.map((field)=>{
     if(field.field_type!='Page break'){
      if(typeof data[`${field.id}`]!='object'){
        if(field.field_type=='Email' && !virtual_state.status){
          virtual_state.status=true;
          virtual_state.email_to=data[`${field.id}`]
        }
        return fields.push({value:data[`${field.id}`]||"" ,field_id:field.id, label:field.label})
      }
      else{
        var vall="";
        data[`${field.id}`].map((val)=>{
            return vall+=val+'[(%'
        });
        return fields.push({value:vall.trim().slice(0, -1).slice(0, -1).slice(0, -1),field_id:field.id, label:field.label})
      }
     }
    });
    const entrie_data={email_to:virtual_state.email_to};
    this.setState({spinner_status:true})
    this.props.createFormEntrie(CREATE_FORM_ENTRIE, entrie_data,SUBMIT_FORM,this.props.formId,this.props.clientId, {fields:fields, is_submitted:"true"});
  }
  transformForm(fieldConfig){
    const properties=InitialFields()[fieldConfig.field_type];
  if (fieldConfig.required){
      REQUIRED.push(fieldConfig.id);
    }

  if(properties.type=='email'){
    PROPERTIES[fieldConfig.id]={
      "type": "string",
      "format": "email",
      "title":fieldConfig.label,

    };
     UISCHEMA[fieldConfig.id]={
      "classNames":fieldConfig.style_class,
      "ui:placeholder":fieldConfig.placeholder_text
    }
  }else if(properties.type=='file'){
    PROPERTIES[fieldConfig.id]={
      "type": "string",
      "format": "data-url",
      "title":fieldConfig.label
    }
  }else if(properties.type=='tel'){
    PROPERTIES[fieldConfig.id]={
      type:properties.type,
      title:fieldConfig.label=""?fieldConfig.id:fieldConfig.label
    };
    UISCHEMA[fieldConfig.id]={
      "ui:widget":properties.widget,
      "ui:title":fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
      "ui:placeholder":fieldConfig.placeholder_text,
      "classNames":fieldConfig.style_class,
      "ui:help":fieldConfig.help_text

    }
  }else if(properties.type=='checkboxes'){
    PROPERTIES[fieldConfig.id]=
    {
      type: "array",
      minItems:1,
      title: fieldConfig.label,
      items: {
        type: "string",
        enum:  fieldConfig.choices.split('[(%'),
      },
      uniqueItems: true
    };
    UISCHEMA[fieldConfig.id]={
      "classNames":fieldConfig.style_class,
      "ui:widget":properties.widget
    }
  }else if(properties.type=='boolean'){
    PROPERTIES[fieldConfig.id]={
      title:fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
      type: "string",
      enum:  fieldConfig.choices.split('[(%'),
    };
    UISCHEMA[fieldConfig.id]={
      "ui:widget":"radio",
      "classNames":fieldConfig.style_class,
      "ui:help":fieldConfig.help_text
    }
  }else if(properties.type=='select'){
    PROPERTIES[fieldConfig.id]={
      type:"string",
      title:fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
      "enum": fieldConfig.choices.split('[(%')
    };
    UISCHEMA[fieldConfig.id]={
      "classNames":fieldConfig.style_class,
      "ui:placeholder":fieldConfig.placeholder_text
    }
  }else if(properties.type=='array'){

  }else{
    PROPERTIES[fieldConfig.id]={
      type:properties.type,
      title:fieldConfig.label=""?fieldConfig.id:fieldConfig.label
    };
    if(properties.widget==''){
        if(this.isHidden(fieldConfig.id)){
         UISCHEMA[fieldConfig.id]={
          // "ui:widget":properties.widget,
          "ui:widget":"hidden",
          "ui:title":fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
          "ui:placeholder":fieldConfig.placeholder_text,
          "classNames":fieldConfig.style_class,
          "ui:help":fieldConfig.help_text
        }
        }else{
          UISCHEMA[fieldConfig.id]={
            "ui:title":fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
            "ui:placeholder":fieldConfig.placeholder_text,
            "classNames":fieldConfig.style_class,
            "ui:help":fieldConfig.help_text
          }
        }

      }else{

        UISCHEMA[fieldConfig.id]={
          "ui:widget":this.isHidden(fieldConfig.id)?"hidden":properties.widget,
          "ui:title":fieldConfig.label=""?fieldConfig.id:fieldConfig.label,
          "ui:placeholder":fieldConfig.placeholder_text,
          "classNames":fieldConfig.style_class,
          "ui:help":fieldConfig.help_text
        }
      }
  }
  }

  componentWillReceiveProps(nextProps) {
    this.setState({spinner_status:nextProps.spinner_status});
    if(nextProps.spinner_status==false){
      REQUIRED=[];
    }
    if(this.state.initialize_state){
      if(nextProps.fields){
        nextProps.fields.map((field)=>{
          if(field){
            return(
              this.transformForm(field)
            )
          }
        });
        this.setState({REQUIRED:REQUIRED,PROPERTIES:PROPERTIES,UISCHEMA:UISCHEMA,desabledFiels:[]});
        REQUIRED=[];
        PROPERTIES={};
        UISCHEMA={};
      }

    }
 }
  render() {
    schema['title']=this.props.title;
    schema['description']="";
    schema["properties"]=this.state.PROPERTIES;
    schema["required"]=this.state.REQUIRED;
    uiSchema=this.state.UISCHEMA;
    return(
      <div>
          <Form 
            schema={schema}
            uiSchema={uiSchema}
            onSubmit={this.Submission}
            onChange={this.handleFormChanges}
            formData={formData}
            >
            {this.state.spinner_status==true?<div className="text-center"><img  width={100} src={logo_spinner} className="Form-logo-spinner" alt="logo" /></div> : 
            <button
                  className="btn btn-md btn-black form-full" type="submit" id="form-submit" name="submit"
                >
                  {this.props.textbtn}
                </button>
            }
            </Form>
      </div>
    )
  }
};  
export default connect(null, {createFormEntrie})(DynamicFormView);

// c42af15a-93cd-4460-9049-3396e832fc8d , Organisation
// c42af15a-93cd-4460-9049-3396e832fc8d , Autre